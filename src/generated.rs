/* automatically generated by rust-bindgen 0.61.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &[u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MAX: u32 = 45;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MAX: u32 = 45;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _TERMIOS_H: u32 = 1;
pub const NCCS: u32 = 32;
pub const _HAVE_STRUCT_TERMIOS_C_ISPEED: u32 = 1;
pub const _HAVE_STRUCT_TERMIOS_C_OSPEED: u32 = 1;
pub const VINTR: u32 = 0;
pub const VQUIT: u32 = 1;
pub const VERASE: u32 = 2;
pub const VKILL: u32 = 3;
pub const VEOF: u32 = 4;
pub const VTIME: u32 = 5;
pub const VMIN: u32 = 6;
pub const VSWTC: u32 = 7;
pub const VSTART: u32 = 8;
pub const VSTOP: u32 = 9;
pub const VSUSP: u32 = 10;
pub const VEOL: u32 = 11;
pub const VREPRINT: u32 = 12;
pub const VDISCARD: u32 = 13;
pub const VWERASE: u32 = 14;
pub const VLNEXT: u32 = 15;
pub const VEOL2: u32 = 16;
pub const IGNBRK: u32 = 1;
pub const BRKINT: u32 = 2;
pub const IGNPAR: u32 = 4;
pub const PARMRK: u32 = 8;
pub const INPCK: u32 = 16;
pub const ISTRIP: u32 = 32;
pub const INLCR: u32 = 64;
pub const IGNCR: u32 = 128;
pub const ICRNL: u32 = 256;
pub const IUCLC: u32 = 512;
pub const IXON: u32 = 1024;
pub const IXANY: u32 = 2048;
pub const IXOFF: u32 = 4096;
pub const IMAXBEL: u32 = 8192;
pub const IUTF8: u32 = 16384;
pub const OPOST: u32 = 1;
pub const OLCUC: u32 = 2;
pub const ONLCR: u32 = 4;
pub const OCRNL: u32 = 8;
pub const ONOCR: u32 = 16;
pub const ONLRET: u32 = 32;
pub const OFILL: u32 = 64;
pub const OFDEL: u32 = 128;
pub const NLDLY: u32 = 256;
pub const NL0: u32 = 0;
pub const NL1: u32 = 256;
pub const CRDLY: u32 = 1536;
pub const CR0: u32 = 0;
pub const CR1: u32 = 512;
pub const CR2: u32 = 1024;
pub const CR3: u32 = 1536;
pub const TABDLY: u32 = 6144;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 2048;
pub const TAB2: u32 = 4096;
pub const TAB3: u32 = 6144;
pub const BSDLY: u32 = 8192;
pub const BS0: u32 = 0;
pub const BS1: u32 = 8192;
pub const FFDLY: u32 = 32768;
pub const FF0: u32 = 0;
pub const FF1: u32 = 32768;
pub const VTDLY: u32 = 16384;
pub const VT0: u32 = 0;
pub const VT1: u32 = 16384;
pub const XTABS: u32 = 6144;
pub const B0: u32 = 0;
pub const B50: u32 = 1;
pub const B75: u32 = 2;
pub const B110: u32 = 3;
pub const B134: u32 = 4;
pub const B150: u32 = 5;
pub const B200: u32 = 6;
pub const B300: u32 = 7;
pub const B600: u32 = 8;
pub const B1200: u32 = 9;
pub const B1800: u32 = 10;
pub const B2400: u32 = 11;
pub const B4800: u32 = 12;
pub const B9600: u32 = 13;
pub const B19200: u32 = 14;
pub const B38400: u32 = 15;
pub const EXTA: u32 = 14;
pub const EXTB: u32 = 15;
pub const CBAUD: u32 = 4111;
pub const CBAUDEX: u32 = 4096;
pub const CIBAUD: u32 = 269418496;
pub const CMSPAR: u32 = 1073741824;
pub const CRTSCTS: u32 = 2147483648;
pub const B57600: u32 = 4097;
pub const B115200: u32 = 4098;
pub const B230400: u32 = 4099;
pub const B460800: u32 = 4100;
pub const B500000: u32 = 4101;
pub const B576000: u32 = 4102;
pub const B921600: u32 = 4103;
pub const B1000000: u32 = 4104;
pub const B1152000: u32 = 4105;
pub const B1500000: u32 = 4106;
pub const B2000000: u32 = 4107;
pub const B2500000: u32 = 4108;
pub const B3000000: u32 = 4109;
pub const B3500000: u32 = 4110;
pub const B4000000: u32 = 4111;
pub const __MAX_BAUD: u32 = 4111;
pub const CSIZE: u32 = 48;
pub const CS5: u32 = 0;
pub const CS6: u32 = 16;
pub const CS7: u32 = 32;
pub const CS8: u32 = 48;
pub const CSTOPB: u32 = 64;
pub const CREAD: u32 = 128;
pub const PARENB: u32 = 256;
pub const PARODD: u32 = 512;
pub const HUPCL: u32 = 1024;
pub const CLOCAL: u32 = 2048;
pub const ISIG: u32 = 1;
pub const ICANON: u32 = 2;
pub const XCASE: u32 = 4;
pub const ECHO: u32 = 8;
pub const ECHOE: u32 = 16;
pub const ECHOK: u32 = 32;
pub const ECHONL: u32 = 64;
pub const NOFLSH: u32 = 128;
pub const TOSTOP: u32 = 256;
pub const ECHOCTL: u32 = 512;
pub const ECHOPRT: u32 = 1024;
pub const ECHOKE: u32 = 2048;
pub const FLUSHO: u32 = 4096;
pub const PENDIN: u32 = 16384;
pub const IEXTEN: u32 = 32768;
pub const EXTPROC: u32 = 65536;
pub const TIOCSER_TEMT: u32 = 1;
pub const TCOOFF: u32 = 0;
pub const TCOON: u32 = 1;
pub const TCIOFF: u32 = 2;
pub const TCION: u32 = 3;
pub const TCIFLUSH: u32 = 0;
pub const TCOFLUSH: u32 = 1;
pub const TCIOFLUSH: u32 = 2;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TTYDEF_IFLAG: u32 = 11554;
pub const TTYDEF_OFLAG: u32 = 6149;
pub const TTYDEF_LFLAG: u32 = 35355;
pub const TTYDEF_CFLAG: u32 = 1440;
pub const TTYDEF_SPEED: u32 = 13;
pub const CEOL: u8 = 0u8;
pub const CERASE: u32 = 127;
pub const CSTATUS: u8 = 0u8;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u8 = 0u8;
pub const DLT_HTYP_UEH: u32 = 1;
pub const DLT_HTYP_MSBF: u32 = 2;
pub const DLT_HTYP_WEID: u32 = 4;
pub const DLT_HTYP_WSID: u32 = 8;
pub const DLT_HTYP_WTMS: u32 = 16;
pub const DLT_HTYP_VERS: u32 = 224;
pub const DLT_HTYP_PROTOCOL_VERSION1: u32 = 32;
pub const DLT_MSIN_VERB: u32 = 1;
pub const DLT_MSIN_MSTP: u32 = 14;
pub const DLT_MSIN_MTIN: u32 = 240;
pub const DLT_MSIN_MSTP_SHIFT: u32 = 1;
pub const DLT_MSIN_MTIN_SHIFT: u32 = 4;
pub const DLT_TYPE_LOG: u32 = 0;
pub const DLT_TYPE_APP_TRACE: u32 = 1;
pub const DLT_TYPE_NW_TRACE: u32 = 2;
pub const DLT_TYPE_CONTROL: u32 = 3;
pub const DLT_TRACE_VARIABLE: u32 = 1;
pub const DLT_TRACE_FUNCTION_IN: u32 = 2;
pub const DLT_TRACE_FUNCTION_OUT: u32 = 3;
pub const DLT_TRACE_STATE: u32 = 4;
pub const DLT_TRACE_VFB: u32 = 5;
pub const DLT_CONTROL_REQUEST: u32 = 1;
pub const DLT_CONTROL_RESPONSE: u32 = 2;
pub const DLT_CONTROL_TIME: u32 = 3;
pub const DLT_MSIN_CONTROL_REQUEST: u32 = 22;
pub const DLT_MSIN_CONTROL_RESPONSE: u32 = 38;
pub const DLT_MSIN_CONTROL_TIME: u32 = 54;
pub const DLT_TYPE_INFO_TYLE: u32 = 15;
pub const DLT_TYPE_INFO_BOOL: u32 = 16;
pub const DLT_TYPE_INFO_SINT: u32 = 32;
pub const DLT_TYPE_INFO_UINT: u32 = 64;
pub const DLT_TYPE_INFO_FLOA: u32 = 128;
pub const DLT_TYPE_INFO_ARAY: u32 = 256;
pub const DLT_TYPE_INFO_STRG: u32 = 512;
pub const DLT_TYPE_INFO_RAWD: u32 = 1024;
pub const DLT_TYPE_INFO_VARI: u32 = 2048;
pub const DLT_TYPE_INFO_FIXP: u32 = 4096;
pub const DLT_TYPE_INFO_TRAI: u32 = 8192;
pub const DLT_TYPE_INFO_STRU: u32 = 16384;
pub const DLT_TYPE_INFO_SCOD: u32 = 229376;
pub const DLT_TYLE_8BIT: u32 = 1;
pub const DLT_TYLE_16BIT: u32 = 2;
pub const DLT_TYLE_32BIT: u32 = 3;
pub const DLT_TYLE_64BIT: u32 = 4;
pub const DLT_TYLE_128BIT: u32 = 5;
pub const DLT_SCOD_ASCII: u32 = 0;
pub const DLT_SCOD_UTF8: u32 = 32768;
pub const DLT_SCOD_HEX: u32 = 65536;
pub const DLT_SCOD_BIN: u32 = 98304;
pub const DLT_SERVICE_ID_CALLSW_CINJECTION: u32 = 4095;
pub const DLT_SERVICE_RESPONSE_OK: u32 = 0;
pub const DLT_SERVICE_RESPONSE_NOT_SUPPORTED: u32 = 1;
pub const DLT_SERVICE_RESPONSE_ERROR: u32 = 2;
pub const DLT_SERVICE_RESPONSE_PERM_DENIED: u32 = 3;
pub const DLT_SERVICE_RESPONSE_WARNING: u32 = 4;
pub const DLT_SERVICE_RESPONSE_LAST: u32 = 5;
pub const DLT_CONNECTION_STATUS_DISCONNECTED: u32 = 1;
pub const DLT_CONNECTION_STATUS_CONNECTED: u32 = 2;
pub const GET_LOG_INFO_STATUS_MIN: u32 = 3;
pub const GET_LOG_INFO_STATUS_MAX: u32 = 7;
pub const GET_LOG_INFO_STATUS_NO_MATCHING_CTX: u32 = 8;
pub const GET_LOG_INFO_STATUS_RESP_DATA_OVERFLOW: u32 = 9;
pub const DLT_DAEMON_TCP_PORT: u32 = 3490;
pub const DLT_FD_INIT: i32 = -1;
pub const DLT_FD_MINIMUM: u32 = 3;
pub const DLT_ID_SIZE: u32 = 4;
pub const DLT_SIZE_WEID: u32 = 4;
pub const DLT_GET_LOG_INFO_HEADER: u32 = 18;
pub const GET_LOG_INFO_LENGTH: u32 = 13;
pub const SERVICE_OPT_LENGTH: u32 = 3;
pub const DLT_MESSAGE_BUFFER_NO_OVERFLOW: u32 = 0;
pub const DLT_MESSAGE_BUFFER_OVERFLOW: u32 = 1;
pub const DLT_OUTPUT_HEX: u32 = 1;
pub const DLT_OUTPUT_ASCII: u32 = 2;
pub const DLT_OUTPUT_MIXED_FOR_PLAIN: u32 = 3;
pub const DLT_OUTPUT_MIXED_FOR_HTML: u32 = 4;
pub const DLT_OUTPUT_ASCII_LIMITED: u32 = 5;
pub const DLT_FILTER_MAX: u32 = 30;
pub const DLT_HEADER_SHOW_NONE: u32 = 0;
pub const DLT_HEADER_SHOW_TIME: u32 = 1;
pub const DLT_HEADER_SHOW_TMSTP: u32 = 2;
pub const DLT_HEADER_SHOW_MSGCNT: u32 = 4;
pub const DLT_HEADER_SHOW_ECUID: u32 = 8;
pub const DLT_HEADER_SHOW_APID: u32 = 16;
pub const DLT_HEADER_SHOW_CTID: u32 = 32;
pub const DLT_HEADER_SHOW_MSGTYPE: u32 = 64;
pub const DLT_HEADER_SHOW_MSGSUBTYPE: u32 = 128;
pub const DLT_HEADER_SHOW_VNVSTATUS: u32 = 256;
pub const DLT_HEADER_SHOW_NOARG: u32 = 512;
pub const DLT_HEADER_SHOW_ALL: u32 = 65535;
pub const DLT_RCV_NONE: u32 = 0;
pub const DLT_RCV_SKIP_HEADER: u32 = 1;
pub const DLT_RCV_REMOVE: u32 = 2;
pub const DLT_PATH_MAX: u32 = 1024;
pub const DLT_MOUNT_PATH_MAX: u32 = 1024;
pub const DLT_ENTRY_MAX: u32 = 100;
pub const DLT_IPC_PATH_MAX: u32 = 100;
pub const DLT_RECEIVE_BUFSIZE: u32 = 65535;
pub const DLT_LINE_LEN: u32 = 1024;
pub const DLT_TRACE_NW_TRUNCATED: &[u8; 5usize] = b"NWTR\0";
pub const DLT_TRACE_NW_START: &[u8; 5usize] = b"NWST\0";
pub const DLT_TRACE_NW_SEGMENT: &[u8; 5usize] = b"NWCH\0";
pub const DLT_TRACE_NW_END: &[u8; 5usize] = b"NWEN\0";
pub const DLT_BUFFER_HEAD: &[u8; 4usize] = b"SHM\0";
pub const DLT_IP_SIZE: u32 = 16;
pub const DLT_MESSAGE_ERROR_OK: u32 = 0;
pub const DLT_MESSAGE_ERROR_UNKNOWN: i32 = -1;
pub const DLT_MESSAGE_ERROR_SIZE: i32 = -2;
pub const DLT_MESSAGE_ERROR_CONTENT: i32 = -3;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const DltReturnValue_DLT_RETURN_LOGGING_DISABLED: DltReturnValue = -7;
pub const DltReturnValue_DLT_RETURN_USER_BUFFER_FULL: DltReturnValue = -6;
pub const DltReturnValue_DLT_RETURN_WRONG_PARAMETER: DltReturnValue = -5;
pub const DltReturnValue_DLT_RETURN_BUFFER_FULL: DltReturnValue = -4;
pub const DltReturnValue_DLT_RETURN_PIPE_FULL: DltReturnValue = -3;
pub const DltReturnValue_DLT_RETURN_PIPE_ERROR: DltReturnValue = -2;
pub const DltReturnValue_DLT_RETURN_ERROR: DltReturnValue = -1;
pub const DltReturnValue_DLT_RETURN_OK: DltReturnValue = 0;
pub const DltReturnValue_DLT_RETURN_TRUE: DltReturnValue = 1;
pub type DltReturnValue = ::std::os::raw::c_int;
pub const DltLogLevelType_DLT_LOG_DEFAULT: DltLogLevelType = -1;
pub const DltLogLevelType_DLT_LOG_OFF: DltLogLevelType = 0;
pub const DltLogLevelType_DLT_LOG_FATAL: DltLogLevelType = 1;
pub const DltLogLevelType_DLT_LOG_ERROR: DltLogLevelType = 2;
pub const DltLogLevelType_DLT_LOG_WARN: DltLogLevelType = 3;
pub const DltLogLevelType_DLT_LOG_INFO: DltLogLevelType = 4;
pub const DltLogLevelType_DLT_LOG_DEBUG: DltLogLevelType = 5;
pub const DltLogLevelType_DLT_LOG_VERBOSE: DltLogLevelType = 6;
pub const DltLogLevelType_DLT_LOG_MAX: DltLogLevelType = 7;
pub type DltLogLevelType = ::std::os::raw::c_int;
pub const DltFormatType_DLT_FORMAT_DEFAULT: DltFormatType = 0;
pub const DltFormatType_DLT_FORMAT_HEX8: DltFormatType = 1;
pub const DltFormatType_DLT_FORMAT_HEX16: DltFormatType = 2;
pub const DltFormatType_DLT_FORMAT_HEX32: DltFormatType = 3;
pub const DltFormatType_DLT_FORMAT_HEX64: DltFormatType = 4;
pub const DltFormatType_DLT_FORMAT_BIN8: DltFormatType = 5;
pub const DltFormatType_DLT_FORMAT_BIN16: DltFormatType = 6;
pub const DltFormatType_DLT_FORMAT_MAX: DltFormatType = 7;
pub type DltFormatType = ::std::os::raw::c_uint;
pub const DltTraceStatusType_DLT_TRACE_STATUS_DEFAULT: DltTraceStatusType = -1;
pub const DltTraceStatusType_DLT_TRACE_STATUS_OFF: DltTraceStatusType = 0;
pub const DltTraceStatusType_DLT_TRACE_STATUS_ON: DltTraceStatusType = 1;
pub const DltTraceStatusType_DLT_TRACE_STATUS_MAX: DltTraceStatusType = 2;
pub type DltTraceStatusType = ::std::os::raw::c_int;
pub const DltNetworkTraceType_DLT_NW_TRACE_IPC: DltNetworkTraceType = 1;
pub const DltNetworkTraceType_DLT_NW_TRACE_CAN: DltNetworkTraceType = 2;
pub const DltNetworkTraceType_DLT_NW_TRACE_FLEXRAY: DltNetworkTraceType = 3;
pub const DltNetworkTraceType_DLT_NW_TRACE_MOST: DltNetworkTraceType = 4;
pub const DltNetworkTraceType_DLT_NW_TRACE_RESERVED0: DltNetworkTraceType = 5;
pub const DltNetworkTraceType_DLT_NW_TRACE_RESERVED1: DltNetworkTraceType = 6;
pub const DltNetworkTraceType_DLT_NW_TRACE_RESERVED2: DltNetworkTraceType = 7;
pub const DltNetworkTraceType_DLT_NW_TRACE_USER_DEFINED0: DltNetworkTraceType = 8;
pub const DltNetworkTraceType_DLT_NW_TRACE_USER_DEFINED1: DltNetworkTraceType = 9;
pub const DltNetworkTraceType_DLT_NW_TRACE_USER_DEFINED2: DltNetworkTraceType = 10;
pub const DltNetworkTraceType_DLT_NW_TRACE_USER_DEFINED3: DltNetworkTraceType = 11;
pub const DltNetworkTraceType_DLT_NW_TRACE_USER_DEFINED4: DltNetworkTraceType = 12;
pub const DltNetworkTraceType_DLT_NW_TRACE_USER_DEFINED5: DltNetworkTraceType = 13;
pub const DltNetworkTraceType_DLT_NW_TRACE_USER_DEFINED6: DltNetworkTraceType = 14;
pub const DltNetworkTraceType_DLT_NW_TRACE_RESEND: DltNetworkTraceType = 15;
pub const DltNetworkTraceType_DLT_NW_TRACE_MAX: DltNetworkTraceType = 16;
pub type DltNetworkTraceType = ::std::os::raw::c_uint;
pub const DltUserLogMode_DLT_USER_MODE_UNDEFINED: DltUserLogMode = -1;
pub const DltUserLogMode_DLT_USER_MODE_OFF: DltUserLogMode = 0;
pub const DltUserLogMode_DLT_USER_MODE_EXTERNAL: DltUserLogMode = 1;
pub const DltUserLogMode_DLT_USER_MODE_INTERNAL: DltUserLogMode = 2;
pub const DltUserLogMode_DLT_USER_MODE_BOTH: DltUserLogMode = 3;
pub const DltUserLogMode_DLT_USER_MODE_MAX: DltUserLogMode = 4;
pub type DltUserLogMode = ::std::os::raw::c_int;
pub type float32_t = f32;
pub type float64_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_storage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_padding) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::std::mem::MaybeUninit<msghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::std::mem::MaybeUninit<cmsghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cmsg_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    const UNINIT: ::std::mem::MaybeUninit<linger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_onoff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_linger) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<osockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    const UNINIT: ::std::mem::MaybeUninit<ip_opts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_opts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreqn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_address) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_ifindex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    const UNINIT: ::std::mem::MaybeUninit<in_pktinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_ifindex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_spec_dst) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MAX: _bindgen_ty_4 = 256;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_6 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_6 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_6 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_6 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_6 = 15;
pub const IPPORT_FTP: _bindgen_ty_6 = 21;
pub const IPPORT_TELNET: _bindgen_ty_6 = 23;
pub const IPPORT_SMTP: _bindgen_ty_6 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_6 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_6 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_6 = 43;
pub const IPPORT_MTP: _bindgen_ty_6 = 57;
pub const IPPORT_TFTP: _bindgen_ty_6 = 69;
pub const IPPORT_RJE: _bindgen_ty_6 = 77;
pub const IPPORT_FINGER: _bindgen_ty_6 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_6 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_6 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_6 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_6 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_6 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_6 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_6 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_6 = 5000;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__in6_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_addr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_zero) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_flowinfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_scope_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreq_source> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_sourceaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    const UNINIT: ::std::mem::MaybeUninit<ipv6_mreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6mr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6mr_interface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    const UNINIT: ::std::mem::MaybeUninit<group_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    const UNINIT: ::std::mem::MaybeUninit<group_source_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_source) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    const UNINIT: ::std::mem::MaybeUninit<ip_msfilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_fmode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_numsrc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_slist) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    const UNINIT: ::std::mem::MaybeUninit<group_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_fmode) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_numsrc) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_slist) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_7 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_7 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_7 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_7 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_7 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_7 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_7 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_7 = 7;
pub const _PC_VDISABLE: _bindgen_ty_7 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_7 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_7 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_7 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_7 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_7 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_7 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_7 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_7 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_7 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_7 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_7 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_7 = 20;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_8 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_8 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_8 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_8 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_8 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_8 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_8 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_8 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_8 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_8 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_8 = 10;
pub const _SC_TIMERS: _bindgen_ty_8 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_8 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_8 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_8 = 14;
pub const _SC_FSYNC: _bindgen_ty_8 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_8 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_8 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_8 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_8 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_8 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_8 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_8 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_8 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_8 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_8 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_8 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_8 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_8 = 28;
pub const _SC_VERSION: _bindgen_ty_8 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_8 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_8 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_8 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_8 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_8 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_8 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_8 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_8 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_8 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_8 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_8 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_8 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_8 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_8 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_8 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_8 = 45;
pub const _SC_2_VERSION: _bindgen_ty_8 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_8 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_8 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_8 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_8 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_8 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_8 = 52;
pub const _SC_PII: _bindgen_ty_8 = 53;
pub const _SC_PII_XTI: _bindgen_ty_8 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_8 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_8 = 56;
pub const _SC_PII_OSI: _bindgen_ty_8 = 57;
pub const _SC_POLL: _bindgen_ty_8 = 58;
pub const _SC_SELECT: _bindgen_ty_8 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_8 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_8 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_8 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_8 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_8 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_8 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_8 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_8 = 66;
pub const _SC_THREADS: _bindgen_ty_8 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_8 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_8 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_8 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_8 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_8 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_8 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_8 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_8 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_8 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_8 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_8 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_8 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_8 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_8 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_8 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_8 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_8 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_8 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_8 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_8 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_8 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_8 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_8 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_8 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_8 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_8 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_8 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_8 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_8 = 96;
pub const _SC_2_UPE: _bindgen_ty_8 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_8 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_8 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_8 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_8 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_8 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_8 = 103;
pub const _SC_INT_MAX: _bindgen_ty_8 = 104;
pub const _SC_INT_MIN: _bindgen_ty_8 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_8 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_8 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_8 = 108;
pub const _SC_NZERO: _bindgen_ty_8 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_8 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_8 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_8 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_8 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_8 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_8 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_8 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_8 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_8 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_8 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_8 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_8 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_8 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_8 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_8 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_8 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_8 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_8 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_8 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_8 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_8 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_8 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_8 = 132;
pub const _SC_BARRIERS: _bindgen_ty_8 = 133;
pub const _SC_BASE: _bindgen_ty_8 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_8 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_8 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_8 = 137;
pub const _SC_CPUTIME: _bindgen_ty_8 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_8 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_8 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_8 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_8 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_8 = 143;
pub const _SC_FIFO: _bindgen_ty_8 = 144;
pub const _SC_PIPE: _bindgen_ty_8 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_8 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_8 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_8 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_8 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_8 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_8 = 151;
pub const _SC_NETWORKING: _bindgen_ty_8 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_8 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_8 = 154;
pub const _SC_REGEXP: _bindgen_ty_8 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_8 = 156;
pub const _SC_SHELL: _bindgen_ty_8 = 157;
pub const _SC_SIGNALS: _bindgen_ty_8 = 158;
pub const _SC_SPAWN: _bindgen_ty_8 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_8 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_8 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_8 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_8 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_8 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_8 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_8 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_8 = 167;
pub const _SC_2_PBS: _bindgen_ty_8 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_8 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_8 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_8 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_8 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_8 = 173;
pub const _SC_STREAMS: _bindgen_ty_8 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_8 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_8 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_8 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_8 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_8 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_8 = 180;
pub const _SC_TRACE: _bindgen_ty_8 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_8 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_8 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_8 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_8 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_8 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_8 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_8 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_8 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_8 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_8 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_8 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_8 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_8 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_8 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_8 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_8 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_8 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_8 = 199;
pub const _SC_IPV6: _bindgen_ty_8 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_8 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_8 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_8 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_8 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_8 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_8 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_8 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_8 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_8 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_8 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_8 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_8 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_8 = 248;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_9 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_9 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_9 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_9 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_9 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_9 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_9 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_9 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_9 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_9 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_9 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_9 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_9 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_9 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_9 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_9 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_9 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_9 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_9 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_9 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_9 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_9 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_9 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_9 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_9 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_9 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_9 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_9 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_9 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_9 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_9 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_9 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_9 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_9 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_9 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_9 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_9 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_9 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_9 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_9 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_9 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_9 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_9 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_9 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_9 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_9 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_9 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_9 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_9 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_9 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_9 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_9 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_9 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_9 = 1149;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_uint;
pub type tcflag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_line: cc_t,
    pub c_cc: [cc_t; 32usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
#[test]
fn bindgen_test_layout_termios() {
    const UNINIT: ::std::mem::MaybeUninit<termios> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<termios>(),
        60usize,
        concat!("Size of: ", stringify!(termios))
    );
    assert_eq!(
        ::std::mem::align_of::<termios>(),
        4usize,
        concat!("Alignment of ", stringify!(termios))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_iflag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_oflag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cflag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_lflag) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_line) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cc) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_cc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_ispeed) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_ispeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_ospeed) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_ospeed)
        )
    );
}
extern "C" {
    pub fn cfgetospeed(__termios_p: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfgetispeed(__termios_p: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfsetospeed(__termios_p: *mut termios, __speed: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetispeed(__termios_p: *mut termios, __speed: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetspeed(__termios_p: *mut termios, __speed: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetattr(
        __fd: ::std::os::raw::c_int,
        __termios_p: *mut termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsetattr(
        __fd: ::std::os::raw::c_int,
        __optional_actions: ::std::os::raw::c_int,
        __termios_p: *const termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfmakeraw(__termios_p: *mut termios);
}
extern "C" {
    pub fn tcsendbreak(
        __fd: ::std::os::raw::c_int,
        __duration: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcdrain(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflush(
        __fd: ::std::os::raw::c_int,
        __queue_selector: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflow(
        __fd: ::std::os::raw::c_int,
        __action: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetsid(__fd: ::std::os::raw::c_int) -> __pid_t;
}
pub const dlt_services_DLT_SERVICE_ID: dlt_services = 0;
pub const dlt_services_DLT_SERVICE_ID_SET_LOG_LEVEL: dlt_services = 1;
pub const dlt_services_DLT_SERVICE_ID_SET_TRACE_STATUS: dlt_services = 2;
pub const dlt_services_DLT_SERVICE_ID_GET_LOG_INFO: dlt_services = 3;
pub const dlt_services_DLT_SERVICE_ID_GET_DEFAULT_LOG_LEVEL: dlt_services = 4;
pub const dlt_services_DLT_SERVICE_ID_STORE_CONFIG: dlt_services = 5;
pub const dlt_services_DLT_SERVICE_ID_RESET_TO_FACTORY_DEFAULT: dlt_services = 6;
pub const dlt_services_DLT_SERVICE_ID_SET_COM_INTERFACE_STATUS: dlt_services = 7;
pub const dlt_services_DLT_SERVICE_ID_SET_COM_INTERFACE_MAX_BANDWIDTH: dlt_services = 8;
pub const dlt_services_DLT_SERVICE_ID_SET_VERBOSE_MODE: dlt_services = 9;
pub const dlt_services_DLT_SERVICE_ID_SET_MESSAGE_FILTERING: dlt_services = 10;
pub const dlt_services_DLT_SERVICE_ID_SET_TIMING_PACKETS: dlt_services = 11;
pub const dlt_services_DLT_SERVICE_ID_GET_LOCAL_TIME: dlt_services = 12;
pub const dlt_services_DLT_SERVICE_ID_USE_ECU_ID: dlt_services = 13;
pub const dlt_services_DLT_SERVICE_ID_USE_SESSION_ID: dlt_services = 14;
pub const dlt_services_DLT_SERVICE_ID_USE_TIMESTAMP: dlt_services = 15;
pub const dlt_services_DLT_SERVICE_ID_USE_EXTENDED_HEADER: dlt_services = 16;
pub const dlt_services_DLT_SERVICE_ID_SET_DEFAULT_LOG_LEVEL: dlt_services = 17;
pub const dlt_services_DLT_SERVICE_ID_SET_DEFAULT_TRACE_STATUS: dlt_services = 18;
pub const dlt_services_DLT_SERVICE_ID_GET_SOFTWARE_VERSION: dlt_services = 19;
pub const dlt_services_DLT_SERVICE_ID_MESSAGE_BUFFER_OVERFLOW: dlt_services = 20;
pub const dlt_services_DLT_SERVICE_ID_LAST_ENTRY: dlt_services = 21;
pub type dlt_services = ::std::os::raw::c_uint;
pub const dlt_user_services_DLT_USER_SERVICE_ID: dlt_user_services = 3840;
pub const dlt_user_services_DLT_SERVICE_ID_UNREGISTER_CONTEXT: dlt_user_services = 3841;
pub const dlt_user_services_DLT_SERVICE_ID_CONNECTION_INFO: dlt_user_services = 3842;
pub const dlt_user_services_DLT_SERVICE_ID_TIMEZONE: dlt_user_services = 3843;
pub const dlt_user_services_DLT_SERVICE_ID_MARKER: dlt_user_services = 3844;
pub const dlt_user_services_DLT_SERVICE_ID_OFFLINE_LOGSTORAGE: dlt_user_services = 3845;
pub const dlt_user_services_DLT_SERVICE_ID_PASSIVE_NODE_CONNECT: dlt_user_services = 3846;
pub const dlt_user_services_DLT_SERVICE_ID_PASSIVE_NODE_CONNECTION_STATUS: dlt_user_services = 3847;
pub const dlt_user_services_DLT_SERVICE_ID_SET_ALL_LOG_LEVEL: dlt_user_services = 3848;
pub const dlt_user_services_DLT_SERVICE_ID_SET_ALL_TRACE_STATUS: dlt_user_services = 3849;
pub const dlt_user_services_DLT_SERVICE_ID_RESERVED_B: dlt_user_services = 3851;
pub const dlt_user_services_DLT_SERVICE_ID_RESERVED_C: dlt_user_services = 3852;
pub const dlt_user_services_DLT_SERVICE_ID_RESERVED_D: dlt_user_services = 3853;
pub const dlt_user_services_DLT_SERVICE_ID_RESERVED_E: dlt_user_services = 3854;
pub const dlt_user_services_DLT_USER_SERVICE_ID_LAST_ENTRY: dlt_user_services = 3855;
pub type dlt_user_services = ::std::os::raw::c_uint;
extern "C" {
    pub static dlt_service_names: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static dlt_user_service_names: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn dlt_get_service_name(id: ::std::os::raw::c_uint) -> *const ::std::os::raw::c_char;
}
pub const DLT_LOG_TO_CONSOLE: _bindgen_ty_10 = 0;
pub const DLT_LOG_TO_SYSLOG: _bindgen_ty_10 = 1;
pub const DLT_LOG_TO_FILE: _bindgen_ty_10 = 2;
pub const DLT_LOG_DROPPED: _bindgen_ty_10 = 3;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const DltReceiverType_DLT_RECEIVE_SOCKET: DltReceiverType = 0;
pub const DltReceiverType_DLT_RECEIVE_FD: DltReceiverType = 1;
pub type DltReceiverType = ::std::os::raw::c_uint;
extern "C" {
    pub static dltSerialHeader: [::std::os::raw::c_char; 4usize];
}
extern "C" {
    pub static mut dltSerialHeaderChar: [::std::os::raw::c_char; 4usize];
}
extern "C" {
    pub static mut dltFifoBaseDir: [::std::os::raw::c_char; 1024usize];
}
pub type ID4 = [::std::os::raw::c_char; 4usize];
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltStorageHeader {
    pub pattern: [::std::os::raw::c_char; 4usize],
    pub seconds: u32,
    pub microseconds: i32,
    pub ecu: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltStorageHeader() {
    const UNINIT: ::std::mem::MaybeUninit<DltStorageHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltStorageHeader>(),
        16usize,
        concat!("Size of: ", stringify!(DltStorageHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<DltStorageHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(DltStorageHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStorageHeader),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStorageHeader),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).microseconds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStorageHeader),
            "::",
            stringify!(microseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ecu) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStorageHeader),
            "::",
            stringify!(ecu)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltStandardHeader {
    pub htyp: u8,
    pub mcnt: u8,
    pub len: u16,
}
#[test]
fn bindgen_test_layout_DltStandardHeader() {
    const UNINIT: ::std::mem::MaybeUninit<DltStandardHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltStandardHeader>(),
        4usize,
        concat!("Size of: ", stringify!(DltStandardHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<DltStandardHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(DltStandardHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).htyp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeader),
            "::",
            stringify!(htyp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcnt) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeader),
            "::",
            stringify!(mcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeader),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltStandardHeaderExtra {
    pub ecu: [::std::os::raw::c_char; 4usize],
    pub seid: u32,
    pub tmsp: u32,
}
#[test]
fn bindgen_test_layout_DltStandardHeaderExtra() {
    const UNINIT: ::std::mem::MaybeUninit<DltStandardHeaderExtra> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltStandardHeaderExtra>(),
        12usize,
        concat!("Size of: ", stringify!(DltStandardHeaderExtra))
    );
    assert_eq!(
        ::std::mem::align_of::<DltStandardHeaderExtra>(),
        1usize,
        concat!("Alignment of ", stringify!(DltStandardHeaderExtra))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ecu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeaderExtra),
            "::",
            stringify!(ecu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeaderExtra),
            "::",
            stringify!(seid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmsp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeaderExtra),
            "::",
            stringify!(tmsp)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltExtendedHeader {
    pub msin: u8,
    pub noar: u8,
    pub apid: [::std::os::raw::c_char; 4usize],
    pub ctid: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltExtendedHeader() {
    const UNINIT: ::std::mem::MaybeUninit<DltExtendedHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltExtendedHeader>(),
        10usize,
        concat!("Size of: ", stringify!(DltExtendedHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<DltExtendedHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(DltExtendedHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltExtendedHeader),
            "::",
            stringify!(msin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noar) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DltExtendedHeader),
            "::",
            stringify!(noar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apid) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DltExtendedHeader),
            "::",
            stringify!(apid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctid) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DltExtendedHeader),
            "::",
            stringify!(ctid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sDltMessage {
    pub found_serialheader: i8,
    pub resync_offset: i32,
    pub headersize: i32,
    pub datasize: i32,
    pub headerbuffer: [u8; 42usize],
    pub databuffer: *mut u8,
    pub databuffersize: i32,
    pub storageheader: *mut DltStorageHeader,
    pub standardheader: *mut DltStandardHeader,
    pub headerextra: DltStandardHeaderExtra,
    pub extendedheader: *mut DltExtendedHeader,
}
#[test]
fn bindgen_test_layout_sDltMessage() {
    const UNINIT: ::std::mem::MaybeUninit<sDltMessage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sDltMessage>(),
        120usize,
        concat!("Size of: ", stringify!(sDltMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<sDltMessage>(),
        8usize,
        concat!("Alignment of ", stringify!(sDltMessage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).found_serialheader) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(found_serialheader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resync_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(resync_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headersize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(headersize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datasize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(datasize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerbuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(headerbuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).databuffer) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(databuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).databuffersize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(databuffersize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageheader) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(storageheader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standardheader) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(standardheader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerextra) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(headerextra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendedheader) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(extendedheader)
        )
    );
}
pub type DltMessage = sDltMessage;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceGetLogInfoRequest {
    pub service_id: u32,
    pub options: u8,
    pub apid: [::std::os::raw::c_char; 4usize],
    pub ctid: [::std::os::raw::c_char; 4usize],
    pub com: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltServiceGetLogInfoRequest() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceGetLogInfoRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceGetLogInfoRequest>(),
        17usize,
        concat!("Size of: ", stringify!(DltServiceGetLogInfoRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceGetLogInfoRequest>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceGetLogInfoRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoRequest),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoRequest),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apid) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoRequest),
            "::",
            stringify!(apid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctid) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoRequest),
            "::",
            stringify!(ctid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).com) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoRequest),
            "::",
            stringify!(com)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceGetDefaultLogLevelRequest {
    pub service_id: u32,
}
#[test]
fn bindgen_test_layout_DltServiceGetDefaultLogLevelRequest() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceGetDefaultLogLevelRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceGetDefaultLogLevelRequest>(),
        4usize,
        concat!("Size of: ", stringify!(DltServiceGetDefaultLogLevelRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceGetDefaultLogLevelRequest>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(DltServiceGetDefaultLogLevelRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetDefaultLogLevelRequest),
            "::",
            stringify!(service_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ContextIDsInfoType {
    pub context_id: [::std::os::raw::c_char; 4usize],
    pub log_level: i16,
    pub trace_status: i16,
    pub len_context_description: u16,
    pub context_description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ContextIDsInfoType() {
    const UNINIT: ::std::mem::MaybeUninit<ContextIDsInfoType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ContextIDsInfoType>(),
        24usize,
        concat!("Size of: ", stringify!(ContextIDsInfoType))
    );
    assert_eq!(
        ::std::mem::align_of::<ContextIDsInfoType>(),
        8usize,
        concat!("Alignment of ", stringify!(ContextIDsInfoType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextIDsInfoType),
            "::",
            stringify!(context_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextIDsInfoType),
            "::",
            stringify!(log_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trace_status) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextIDsInfoType),
            "::",
            stringify!(trace_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_context_description) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextIDsInfoType),
            "::",
            stringify!(len_context_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextIDsInfoType),
            "::",
            stringify!(context_description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AppIDsType {
    pub app_id: [::std::os::raw::c_char; 4usize],
    pub count_context_ids: u16,
    pub context_id_info: *mut ContextIDsInfoType,
    pub len_app_description: u16,
    pub app_description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AppIDsType() {
    const UNINIT: ::std::mem::MaybeUninit<AppIDsType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AppIDsType>(),
        32usize,
        concat!("Size of: ", stringify!(AppIDsType))
    );
    assert_eq!(
        ::std::mem::align_of::<AppIDsType>(),
        8usize,
        concat!("Alignment of ", stringify!(AppIDsType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AppIDsType),
            "::",
            stringify!(app_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_context_ids) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AppIDsType),
            "::",
            stringify!(count_context_ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_id_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AppIDsType),
            "::",
            stringify!(context_id_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_app_description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AppIDsType),
            "::",
            stringify!(len_app_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_description) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AppIDsType),
            "::",
            stringify!(app_description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LogInfoType {
    pub count_app_ids: u16,
    pub app_ids: *mut AppIDsType,
}
#[test]
fn bindgen_test_layout_LogInfoType() {
    const UNINIT: ::std::mem::MaybeUninit<LogInfoType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LogInfoType>(),
        16usize,
        concat!("Size of: ", stringify!(LogInfoType))
    );
    assert_eq!(
        ::std::mem::align_of::<LogInfoType>(),
        8usize,
        concat!("Alignment of ", stringify!(LogInfoType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_app_ids) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LogInfoType),
            "::",
            stringify!(count_app_ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_ids) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LogInfoType),
            "::",
            stringify!(app_ids)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceGetLogInfoResponse {
    pub service_id: u32,
    pub status: u8,
    pub log_info_type: LogInfoType,
    pub com: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltServiceGetLogInfoResponse() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceGetLogInfoResponse> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceGetLogInfoResponse>(),
        32usize,
        concat!("Size of: ", stringify!(DltServiceGetLogInfoResponse))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceGetLogInfoResponse>(),
        8usize,
        concat!("Alignment of ", stringify!(DltServiceGetLogInfoResponse))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoResponse),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoResponse),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_info_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoResponse),
            "::",
            stringify!(log_info_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).com) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoResponse),
            "::",
            stringify!(com)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceSetLogLevel {
    pub service_id: u32,
    pub apid: [::std::os::raw::c_char; 4usize],
    pub ctid: [::std::os::raw::c_char; 4usize],
    pub log_level: u8,
    pub com: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltServiceSetLogLevel() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceSetLogLevel> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceSetLogLevel>(),
        17usize,
        concat!("Size of: ", stringify!(DltServiceSetLogLevel))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceSetLogLevel>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceSetLogLevel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetLogLevel),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetLogLevel),
            "::",
            stringify!(apid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetLogLevel),
            "::",
            stringify!(ctid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_level) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetLogLevel),
            "::",
            stringify!(log_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).com) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetLogLevel),
            "::",
            stringify!(com)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceSetDefaultLogLevel {
    pub service_id: u32,
    pub log_level: u8,
    pub com: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltServiceSetDefaultLogLevel() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceSetDefaultLogLevel> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceSetDefaultLogLevel>(),
        9usize,
        concat!("Size of: ", stringify!(DltServiceSetDefaultLogLevel))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceSetDefaultLogLevel>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceSetDefaultLogLevel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetDefaultLogLevel),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetDefaultLogLevel),
            "::",
            stringify!(log_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).com) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetDefaultLogLevel),
            "::",
            stringify!(com)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceSetVerboseMode {
    pub service_id: u32,
    pub new_status: u8,
}
#[test]
fn bindgen_test_layout_DltServiceSetVerboseMode() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceSetVerboseMode> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceSetVerboseMode>(),
        5usize,
        concat!("Size of: ", stringify!(DltServiceSetVerboseMode))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceSetVerboseMode>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceSetVerboseMode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetVerboseMode),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetVerboseMode),
            "::",
            stringify!(new_status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceSetCommunicationInterfaceStatus {
    pub service_id: u32,
    pub com: [::std::os::raw::c_char; 4usize],
    pub new_status: u8,
}
#[test]
fn bindgen_test_layout_DltServiceSetCommunicationInterfaceStatus() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceSetCommunicationInterfaceStatus> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceSetCommunicationInterfaceStatus>(),
        9usize,
        concat!(
            "Size of: ",
            stringify!(DltServiceSetCommunicationInterfaceStatus)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceSetCommunicationInterfaceStatus>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(DltServiceSetCommunicationInterfaceStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetCommunicationInterfaceStatus),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).com) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetCommunicationInterfaceStatus),
            "::",
            stringify!(com)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetCommunicationInterfaceStatus),
            "::",
            stringify!(new_status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceSetCommunicationMaximumBandwidth {
    pub service_id: u32,
    pub com: [::std::os::raw::c_char; 4usize],
    pub max_bandwidth: u32,
}
#[test]
fn bindgen_test_layout_DltServiceSetCommunicationMaximumBandwidth() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceSetCommunicationMaximumBandwidth> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceSetCommunicationMaximumBandwidth>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(DltServiceSetCommunicationMaximumBandwidth)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceSetCommunicationMaximumBandwidth>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(DltServiceSetCommunicationMaximumBandwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetCommunicationMaximumBandwidth),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).com) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetCommunicationMaximumBandwidth),
            "::",
            stringify!(com)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_bandwidth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceSetCommunicationMaximumBandwidth),
            "::",
            stringify!(max_bandwidth)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceResponse {
    pub service_id: u32,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_DltServiceResponse() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceResponse> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceResponse>(),
        5usize,
        concat!("Size of: ", stringify!(DltServiceResponse))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceResponse>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceResponse))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceResponse),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceResponse),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceGetDefaultLogLevelResponse {
    pub service_id: u32,
    pub status: u8,
    pub log_level: u8,
}
#[test]
fn bindgen_test_layout_DltServiceGetDefaultLogLevelResponse() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceGetDefaultLogLevelResponse> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceGetDefaultLogLevelResponse>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(DltServiceGetDefaultLogLevelResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceGetDefaultLogLevelResponse>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(DltServiceGetDefaultLogLevelResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetDefaultLogLevelResponse),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetDefaultLogLevelResponse),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_level) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetDefaultLogLevelResponse),
            "::",
            stringify!(log_level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceMessageBufferOverflowResponse {
    pub service_id: u32,
    pub status: u8,
    pub overflow: u8,
    pub overflow_counter: u32,
}
#[test]
fn bindgen_test_layout_DltServiceMessageBufferOverflowResponse() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceMessageBufferOverflowResponse> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceMessageBufferOverflowResponse>(),
        10usize,
        concat!(
            "Size of: ",
            stringify!(DltServiceMessageBufferOverflowResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceMessageBufferOverflowResponse>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(DltServiceMessageBufferOverflowResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceMessageBufferOverflowResponse),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceMessageBufferOverflowResponse),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceMessageBufferOverflowResponse),
            "::",
            stringify!(overflow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_counter) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceMessageBufferOverflowResponse),
            "::",
            stringify!(overflow_counter)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceGetSoftwareVersion {
    pub service_id: u32,
}
#[test]
fn bindgen_test_layout_DltServiceGetSoftwareVersion() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceGetSoftwareVersion> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceGetSoftwareVersion>(),
        4usize,
        concat!("Size of: ", stringify!(DltServiceGetSoftwareVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceGetSoftwareVersion>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceGetSoftwareVersion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetSoftwareVersion),
            "::",
            stringify!(service_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceGetSoftwareVersionResponse {
    pub service_id: u32,
    pub status: u8,
    pub length: u32,
}
#[test]
fn bindgen_test_layout_DltServiceGetSoftwareVersionResponse() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceGetSoftwareVersionResponse> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceGetSoftwareVersionResponse>(),
        9usize,
        concat!(
            "Size of: ",
            stringify!(DltServiceGetSoftwareVersionResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceGetSoftwareVersionResponse>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(DltServiceGetSoftwareVersionResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetSoftwareVersionResponse),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetSoftwareVersionResponse),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetSoftwareVersionResponse),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceUnregisterContext {
    pub service_id: u32,
    pub status: u8,
    pub apid: [::std::os::raw::c_char; 4usize],
    pub ctid: [::std::os::raw::c_char; 4usize],
    pub comid: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltServiceUnregisterContext() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceUnregisterContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceUnregisterContext>(),
        17usize,
        concat!("Size of: ", stringify!(DltServiceUnregisterContext))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceUnregisterContext>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceUnregisterContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceUnregisterContext),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceUnregisterContext),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apid) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceUnregisterContext),
            "::",
            stringify!(apid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctid) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceUnregisterContext),
            "::",
            stringify!(ctid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comid) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceUnregisterContext),
            "::",
            stringify!(comid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceConnectionInfo {
    pub service_id: u32,
    pub status: u8,
    pub state: u8,
    pub comid: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltServiceConnectionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceConnectionInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceConnectionInfo>(),
        10usize,
        concat!("Size of: ", stringify!(DltServiceConnectionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceConnectionInfo>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceConnectionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceConnectionInfo),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceConnectionInfo),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceConnectionInfo),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comid) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceConnectionInfo),
            "::",
            stringify!(comid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceTimezone {
    pub service_id: u32,
    pub status: u8,
    pub timezone: i32,
    pub isdst: u8,
}
#[test]
fn bindgen_test_layout_DltServiceTimezone() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceTimezone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceTimezone>(),
        10usize,
        concat!("Size of: ", stringify!(DltServiceTimezone))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceTimezone>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceTimezone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceTimezone),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceTimezone),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timezone) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceTimezone),
            "::",
            stringify!(timezone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isdst) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceTimezone),
            "::",
            stringify!(isdst)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceMarker {
    pub service_id: u32,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_DltServiceMarker() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceMarker> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceMarker>(),
        5usize,
        concat!("Size of: ", stringify!(DltServiceMarker))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceMarker>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceMarker))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceMarker),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceMarker),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceOfflineLogstorage {
    pub service_id: u32,
    pub mount_point: [::std::os::raw::c_char; 1024usize],
    pub connection_type: u8,
    pub comid: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltServiceOfflineLogstorage() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceOfflineLogstorage> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceOfflineLogstorage>(),
        1033usize,
        concat!("Size of: ", stringify!(DltServiceOfflineLogstorage))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceOfflineLogstorage>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceOfflineLogstorage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceOfflineLogstorage),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mount_point) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceOfflineLogstorage),
            "::",
            stringify!(mount_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_type) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceOfflineLogstorage),
            "::",
            stringify!(connection_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comid) as usize - ptr as usize },
        1029usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceOfflineLogstorage),
            "::",
            stringify!(comid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceGetCurrentFilterInfo {
    pub service_id: u32,
    pub status: u8,
    pub name: [::std::os::raw::c_char; 100usize],
    pub level: u32,
    pub client_mask: u32,
    pub ctrl_mask: u32,
    pub injections: [::std::os::raw::c_char; 100usize],
}
#[test]
fn bindgen_test_layout_DltServiceGetCurrentFilterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceGetCurrentFilterInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceGetCurrentFilterInfo>(),
        217usize,
        concat!("Size of: ", stringify!(DltServiceGetCurrentFilterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceGetCurrentFilterInfo>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServiceGetCurrentFilterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetCurrentFilterInfo),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetCurrentFilterInfo),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetCurrentFilterInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetCurrentFilterInfo),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_mask) as usize - ptr as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetCurrentFilterInfo),
            "::",
            stringify!(client_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_mask) as usize - ptr as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetCurrentFilterInfo),
            "::",
            stringify!(ctrl_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).injections) as usize - ptr as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetCurrentFilterInfo),
            "::",
            stringify!(injections)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServicePassiveNodeConnect {
    pub service_id: u32,
    pub connection_status: u32,
    pub node_id: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltServicePassiveNodeConnect() {
    const UNINIT: ::std::mem::MaybeUninit<DltServicePassiveNodeConnect> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServicePassiveNodeConnect>(),
        12usize,
        concat!("Size of: ", stringify!(DltServicePassiveNodeConnect))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServicePassiveNodeConnect>(),
        1usize,
        concat!("Alignment of ", stringify!(DltServicePassiveNodeConnect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServicePassiveNodeConnect),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServicePassiveNodeConnect),
            "::",
            stringify!(connection_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServicePassiveNodeConnect),
            "::",
            stringify!(node_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltServicePassiveNodeConnectionInfo {
    pub service_id: u32,
    pub status: u8,
    pub num_connections: u32,
    pub connection_status: [u8; 100usize],
    pub node_id: [::std::os::raw::c_char; 100usize],
}
#[test]
fn bindgen_test_layout_DltServicePassiveNodeConnectionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<DltServicePassiveNodeConnectionInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServicePassiveNodeConnectionInfo>(),
        209usize,
        concat!("Size of: ", stringify!(DltServicePassiveNodeConnectionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServicePassiveNodeConnectionInfo>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(DltServicePassiveNodeConnectionInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServicePassiveNodeConnectionInfo),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServicePassiveNodeConnectionInfo),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_connections) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServicePassiveNodeConnectionInfo),
            "::",
            stringify!(num_connections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_status) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServicePassiveNodeConnectionInfo),
            "::",
            stringify!(connection_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_id) as usize - ptr as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServicePassiveNodeConnectionInfo),
            "::",
            stringify!(node_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltFilter {
    pub apid: [[::std::os::raw::c_char; 4usize]; 30usize],
    pub ctid: [[::std::os::raw::c_char; 4usize]; 30usize],
    pub counter: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DltFilter() {
    const UNINIT: ::std::mem::MaybeUninit<DltFilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltFilter>(),
        244usize,
        concat!("Size of: ", stringify!(DltFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<DltFilter>(),
        4usize,
        concat!("Alignment of ", stringify!(DltFilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltFilter),
            "::",
            stringify!(apid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctid) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DltFilter),
            "::",
            stringify!(ctid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(DltFilter),
            "::",
            stringify!(counter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sDltFile {
    pub handle: *mut FILE,
    pub index: *mut ::std::os::raw::c_long,
    pub counter: i32,
    pub counter_total: i32,
    pub position: i32,
    pub file_length: ::std::os::raw::c_long,
    pub file_position: ::std::os::raw::c_long,
    pub error_messages: i32,
    pub filter: *mut DltFilter,
    pub filter_counter: i32,
    pub msg: DltMessage,
}
#[test]
fn bindgen_test_layout_sDltFile() {
    const UNINIT: ::std::mem::MaybeUninit<sDltFile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sDltFile>(),
        192usize,
        concat!("Size of: ", stringify!(sDltFile))
    );
    assert_eq!(
        ::std::mem::align_of::<sDltFile>(),
        8usize,
        concat!("Alignment of ", stringify!(sDltFile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter_total) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(counter_total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_length) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(file_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_position) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(file_position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_messages) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(error_messages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_counter) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(filter_counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(msg)
        )
    );
}
pub type DltFile = sDltFile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltReceiver {
    pub lastBytesRcvd: i32,
    pub bytesRcvd: i32,
    pub totalBytesRcvd: i32,
    pub buffer: *mut ::std::os::raw::c_char,
    pub buf: *mut ::std::os::raw::c_char,
    pub backup_buf: *mut ::std::os::raw::c_char,
    pub fd: ::std::os::raw::c_int,
    pub buffersize: i32,
}
#[test]
fn bindgen_test_layout_DltReceiver() {
    const UNINIT: ::std::mem::MaybeUninit<DltReceiver> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltReceiver>(),
        48usize,
        concat!("Size of: ", stringify!(DltReceiver))
    );
    assert_eq!(
        ::std::mem::align_of::<DltReceiver>(),
        8usize,
        concat!("Alignment of ", stringify!(DltReceiver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastBytesRcvd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(lastBytesRcvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesRcvd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(bytesRcvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalBytesRcvd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(totalBytesRcvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backup_buf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(backup_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffersize) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(buffersize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltBuffer {
    pub shm: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_int,
    pub mem: *mut ::std::os::raw::c_uchar,
    pub min_size: u32,
    pub max_size: u32,
    pub step_size: u32,
}
#[test]
fn bindgen_test_layout_DltBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<DltBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltBuffer>(),
        40usize,
        concat!("Size of: ", stringify!(DltBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<DltBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(DltBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(shm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(min_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(step_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltBufferHead {
    pub write: ::std::os::raw::c_int,
    pub read: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DltBufferHead() {
    const UNINIT: ::std::mem::MaybeUninit<DltBufferHead> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltBufferHead>(),
        12usize,
        concat!("Size of: ", stringify!(DltBufferHead))
    );
    assert_eq!(
        ::std::mem::align_of::<DltBufferHead>(),
        4usize,
        concat!("Alignment of ", stringify!(DltBufferHead))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBufferHead),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBufferHead),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBufferHead),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltBufferBlockHead {
    pub head: [::std::os::raw::c_char; 4usize],
    pub status: ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DltBufferBlockHead() {
    const UNINIT: ::std::mem::MaybeUninit<DltBufferBlockHead> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltBufferBlockHead>(),
        12usize,
        concat!("Size of: ", stringify!(DltBufferBlockHead))
    );
    assert_eq!(
        ::std::mem::align_of::<DltBufferBlockHead>(),
        4usize,
        concat!("Alignment of ", stringify!(DltBufferBlockHead))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBufferBlockHead),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBufferBlockHead),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBufferBlockHead),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltBindAddress {
    pub ip: [::std::os::raw::c_char; 16usize],
    pub next: *mut DltBindAddress,
}
#[test]
fn bindgen_test_layout_DltBindAddress() {
    const UNINIT: ::std::mem::MaybeUninit<DltBindAddress> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltBindAddress>(),
        24usize,
        concat!("Size of: ", stringify!(DltBindAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<DltBindAddress>(),
        8usize,
        concat!("Alignment of ", stringify!(DltBindAddress))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBindAddress),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBindAddress),
            "::",
            stringify!(next)
        )
    );
}
pub type DltBindAddress_t = DltBindAddress;
extern "C" {
    pub fn dlt_print_hex(ptr: *mut u8, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dlt_print_hex_string(
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        ptr: *mut u8,
        size: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_print_mixed_string(
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        ptr: *mut u8,
        size: ::std::os::raw::c_int,
        html: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_print_char_string(
        text: *mut *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        ptr: *mut u8,
        size: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_print_id(text: *mut ::std::os::raw::c_char, id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dlt_set_id(id: *mut ::std::os::raw::c_char, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dlt_clean_string(text: *mut ::std::os::raw::c_char, length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dlt_filter_init(
        filter: *mut DltFilter,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_filter_free(
        filter: *mut DltFilter,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_filter_load(
        filter: *mut DltFilter,
        filename: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_filter_save(
        filter: *mut DltFilter,
        filename: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_filter_find(
        filter: *mut DltFilter,
        apid: *const ::std::os::raw::c_char,
        ctid: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_filter_add(
        filter: *mut DltFilter,
        apid: *const ::std::os::raw::c_char,
        ctid: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_filter_delete(
        filter: *mut DltFilter,
        apid: *const ::std::os::raw::c_char,
        ctid: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_init(msg: *mut DltMessage, verbose: ::std::os::raw::c_int)
        -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_free(msg: *mut DltMessage, verbose: ::std::os::raw::c_int)
        -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_header(
        msg: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_header_flags(
        msg: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_payload(
        msg: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_filter_check(
        msg: *mut DltMessage,
        filter: *mut DltFilter,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_read(
        msg: *mut DltMessage,
        buffer: *mut u8,
        length: ::std::os::raw::c_uint,
        resync: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_message_get_extraparameters(
        msg: *mut DltMessage,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_set_extraparameters(
        msg: *mut DltMessage,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_init(file: *mut DltFile, verbose: ::std::os::raw::c_int) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_set_filter(
        file: *mut DltFile,
        filter: *mut DltFilter,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_open(
        file: *mut DltFile,
        filename: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read(file: *mut DltFile, verbose: ::std::os::raw::c_int) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read_raw(
        file: *mut DltFile,
        resync: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_close(file: *mut DltFile, verbose: ::std::os::raw::c_int) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read_header(
        file: *mut DltFile,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read_header_raw(
        file: *mut DltFile,
        resync: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read_header_extended(
        file: *mut DltFile,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read_data(file: *mut DltFile, verbose: ::std::os::raw::c_int)
        -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_message(
        file: *mut DltFile,
        index: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_free(file: *mut DltFile, verbose: ::std::os::raw::c_int) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_set_filename(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dlt_log_set_level(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dlt_log_init(mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dlt_log(prio: ::std::os::raw::c_int, s: *mut ::std::os::raw::c_char) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_vlog(
        prio: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_vnlog(
        prio: ::std::os::raw::c_int,
        size: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_free();
}
extern "C" {
    pub fn dlt_receiver_init(
        receiver: *mut DltReceiver,
        _fd: ::std::os::raw::c_int,
        _buffersize: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_free(receiver: *mut DltReceiver) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_init_unix_socket(
        receiver: *mut DltReceiver,
        fd: ::std::os::raw::c_int,
        buffer: *mut *mut ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_free_unix_socket(receiver: *mut DltReceiver) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_receive(
        receiver: *mut DltReceiver,
        from_src: DltReceiverType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_receiver_remove(
        receiver: *mut DltReceiver,
        size: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_move_to_begin(receiver: *mut DltReceiver) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_check_and_get(
        receiver: *mut DltReceiver,
        dest: *mut ::std::os::raw::c_void,
        to_get: ::std::os::raw::c_uint,
        skip_header: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_set_storageheader(
        storageheader: *mut DltStorageHeader,
        ecu: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_check_storageheader(storageheader: *mut DltStorageHeader) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_init_static_server(
        buf: *mut DltBuffer,
        ptr: *const ::std::os::raw::c_uchar,
        size: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_init_static_client(
        buf: *mut DltBuffer,
        ptr: *const ::std::os::raw::c_uchar,
        size: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_init_dynamic(
        buf: *mut DltBuffer,
        min_size: u32,
        max_size: u32,
        step_size: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_free_static(buf: *mut DltBuffer) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_free_dynamic(buf: *mut DltBuffer) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_check_size(
        buf: *mut DltBuffer,
        needed: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_push(
        buf: *mut DltBuffer,
        data: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_uint,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_push3(
        buf: *mut DltBuffer,
        data1: *const ::std::os::raw::c_uchar,
        size1: ::std::os::raw::c_uint,
        data2: *const ::std::os::raw::c_uchar,
        size2: ::std::os::raw::c_uint,
        data3: *const ::std::os::raw::c_uchar,
        size3: ::std::os::raw::c_uint,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_pull(
        buf: *mut DltBuffer,
        data: *mut ::std::os::raw::c_uchar,
        max_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_buffer_copy(
        buf: *mut DltBuffer,
        data: *mut ::std::os::raw::c_uchar,
        max_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_buffer_remove(buf: *mut DltBuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_buffer_info(buf: *mut DltBuffer);
}
extern "C" {
    pub fn dlt_buffer_status(buf: *mut DltBuffer);
}
extern "C" {
    pub fn dlt_buffer_get_total_size(buf: *mut DltBuffer) -> u32;
}
extern "C" {
    pub fn dlt_buffer_get_used_size(buf: *mut DltBuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_buffer_get_message_count(buf: *mut DltBuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_setup_serial(fd: ::std::os::raw::c_int, speed: speed_t) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_convert_serial_speed(baudrate: ::std::os::raw::c_int) -> speed_t;
}
extern "C" {
    pub fn dlt_get_version(buf: *mut ::std::os::raw::c_char, size: usize);
}
extern "C" {
    pub fn dlt_get_major_version(buf: *mut ::std::os::raw::c_char, size: usize);
}
extern "C" {
    pub fn dlt_get_minor_version(buf: *mut ::std::os::raw::c_char, size: usize);
}
extern "C" {
    pub fn dlt_init_common() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_uptime() -> u32;
}
extern "C" {
    pub fn dlt_message_print_header(
        message: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        size: u32,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_print_hex(
        message: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        size: u32,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_print_ascii(
        message: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        size: u32,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_print_mixed_plain(
        message: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        size: u32,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_print_mixed_html(
        message: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        size: u32,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_argument_print(
        msg: *mut DltMessage,
        type_info: u32,
        ptr: *mut *mut u8,
        datalength: *mut i32,
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        byteLength: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_check_envvar();
}
extern "C" {
    pub fn dlt_set_loginfo_parse_service_id(
        resp_text: *mut ::std::os::raw::c_char,
        service_id: *mut u32,
        service_opt: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_getloginfo_conv_ascii_to_uint16_t(
        rp: *mut ::std::os::raw::c_char,
        rp_count: *mut ::std::os::raw::c_int,
    ) -> i16;
}
extern "C" {
    pub fn dlt_getloginfo_conv_ascii_to_int16_t(
        rp: *mut ::std::os::raw::c_char,
        rp_count: *mut ::std::os::raw::c_int,
    ) -> i16;
}
extern "C" {
    pub fn dlt_getloginfo_conv_ascii_to_id(
        rp: *mut ::std::os::raw::c_char,
        rp_count: *mut ::std::os::raw::c_int,
        wp: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dlt_hex_ascii_to_binary(
        ptr: *const ::std::os::raw::c_char,
        binary: *mut u8,
        size: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dlt_mkdir_recursive(dir: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub const DltClientMode_DLT_CLIENT_MODE_UNDEFINED: DltClientMode = -1;
pub const DltClientMode_DLT_CLIENT_MODE_TCP: DltClientMode = 0;
pub const DltClientMode_DLT_CLIENT_MODE_SERIAL: DltClientMode = 1;
pub const DltClientMode_DLT_CLIENT_MODE_UNIX: DltClientMode = 2;
pub type DltClientMode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltClient {
    pub receiver: DltReceiver,
    pub sock: ::std::os::raw::c_int,
    pub servIP: *mut ::std::os::raw::c_char,
    pub port: ::std::os::raw::c_int,
    pub serialDevice: *mut ::std::os::raw::c_char,
    pub socketPath: *mut ::std::os::raw::c_char,
    pub ecuid: [::std::os::raw::c_char; 4usize],
    pub baudrate: speed_t,
    pub mode: DltClientMode,
}
#[test]
fn bindgen_test_layout_DltClient() {
    const UNINIT: ::std::mem::MaybeUninit<DltClient> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltClient>(),
        104usize,
        concat!("Size of: ", stringify!(DltClient))
    );
    assert_eq!(
        ::std::mem::align_of::<DltClient>(),
        8usize,
        concat!("Alignment of ", stringify!(DltClient))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).receiver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(receiver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sock) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servIP) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(servIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialDevice) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(serialDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socketPath) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(socketPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ecuid) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(ecuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baudrate) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(baudrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn dlt_client_register_message_callback(
        registerd_callback: ::std::option::Option<
            unsafe extern "C" fn(
                message: *mut DltMessage,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn dlt_client_init_port(
        client: *mut DltClient,
        port: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_client_init(
        client: *mut DltClient,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_connect(
        client: *mut DltClient,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_cleanup(
        client: *mut DltClient,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_main_loop(
        client: *mut DltClient,
        data: *mut ::std::os::raw::c_void,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_ctrl_msg(
        client: *mut DltClient,
        apid: *mut ::std::os::raw::c_char,
        ctid: *mut ::std::os::raw::c_char,
        payload: *mut u8,
        size: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_inject_msg(
        client: *mut DltClient,
        apid: *mut ::std::os::raw::c_char,
        ctid: *mut ::std::os::raw::c_char,
        serviceID: u32,
        buffer: *mut u8,
        size: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_log_level(
        client: *mut DltClient,
        apid: *mut ::std::os::raw::c_char,
        ctid: *mut ::std::os::raw::c_char,
        logLevel: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_get_log_info(client: *mut DltClient) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_client_get_default_log_level(client: *mut DltClient) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_get_software_version(client: *mut DltClient) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_getloginfo_init();
}
extern "C" {
    pub fn dlt_getloginfo_free();
}
extern "C" {
    pub fn dlt_client_send_trace_status(
        client: *mut DltClient,
        apid: *mut ::std::os::raw::c_char,
        ctid: *mut ::std::os::raw::c_char,
        traceStatus: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_default_log_level(
        client: *mut DltClient,
        defaultLogLevel: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_all_log_level(client: *mut DltClient, LogLevel: u8) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_default_trace_status(
        client: *mut DltClient,
        defaultTraceStatus: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_all_trace_status(
        client: *mut DltClient,
        traceStatus: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_timing_pakets(
        client: *mut DltClient,
        timingPakets: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_store_config(client: *mut DltClient) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_reset_to_factory_default(client: *mut DltClient) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_setbaudrate(
        client: *mut DltClient,
        baudrate: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_set_server_ip(
        client: *mut DltClient,
        ipaddr: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_client_set_serial_device(
        client: *mut DltClient,
        serial_device: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_client_set_socket_path(
        client: *mut DltClient,
        socket_path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_client_parse_get_log_info_resp_text(
        resp: *mut DltServiceGetLogInfoResponse,
        resp_text: *mut ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_cleanup_get_log_info(
        resp: *mut DltServiceGetLogInfoResponse,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
