/* automatically generated by rust-bindgen 0.61.0 */

pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sem_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_sem_t() {
    const UNINIT: ::std::mem::MaybeUninit<sem_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sem_t>(),
        32usize,
        concat!("Size of: ", stringify!(sem_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sem_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sem_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sem_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sem_t),
            "::",
            stringify!(__align)
        )
    );
}
impl DltReturnValue {
    pub const DLT_RETURN_LOGGING_DISABLED: DltReturnValue = DltReturnValue(-7);
}
impl DltReturnValue {
    pub const DLT_RETURN_USER_BUFFER_FULL: DltReturnValue = DltReturnValue(-6);
}
impl DltReturnValue {
    pub const DLT_RETURN_WRONG_PARAMETER: DltReturnValue = DltReturnValue(-5);
}
impl DltReturnValue {
    pub const DLT_RETURN_BUFFER_FULL: DltReturnValue = DltReturnValue(-4);
}
impl DltReturnValue {
    pub const DLT_RETURN_PIPE_FULL: DltReturnValue = DltReturnValue(-3);
}
impl DltReturnValue {
    pub const DLT_RETURN_PIPE_ERROR: DltReturnValue = DltReturnValue(-2);
}
impl DltReturnValue {
    pub const DLT_RETURN_ERROR: DltReturnValue = DltReturnValue(-1);
}
impl DltReturnValue {
    pub const DLT_RETURN_OK: DltReturnValue = DltReturnValue(0);
}
impl DltReturnValue {
    pub const DLT_RETURN_TRUE: DltReturnValue = DltReturnValue(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct DltReturnValue(pub ::std::os::raw::c_int);
impl DltLogLevelType {
    pub const DLT_LOG_DEFAULT: DltLogLevelType = DltLogLevelType(-1);
}
impl DltLogLevelType {
    pub const DLT_LOG_OFF: DltLogLevelType = DltLogLevelType(0);
}
impl DltLogLevelType {
    pub const DLT_LOG_FATAL: DltLogLevelType = DltLogLevelType(1);
}
impl DltLogLevelType {
    pub const DLT_LOG_ERROR: DltLogLevelType = DltLogLevelType(2);
}
impl DltLogLevelType {
    pub const DLT_LOG_WARN: DltLogLevelType = DltLogLevelType(3);
}
impl DltLogLevelType {
    pub const DLT_LOG_INFO: DltLogLevelType = DltLogLevelType(4);
}
impl DltLogLevelType {
    pub const DLT_LOG_DEBUG: DltLogLevelType = DltLogLevelType(5);
}
impl DltLogLevelType {
    pub const DLT_LOG_VERBOSE: DltLogLevelType = DltLogLevelType(6);
}
impl DltLogLevelType {
    pub const DLT_LOG_MAX: DltLogLevelType = DltLogLevelType(7);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct DltLogLevelType(pub ::std::os::raw::c_int);
impl DltFormatType {
    pub const DLT_FORMAT_DEFAULT: DltFormatType = DltFormatType(0);
}
impl DltFormatType {
    pub const DLT_FORMAT_HEX8: DltFormatType = DltFormatType(1);
}
impl DltFormatType {
    pub const DLT_FORMAT_HEX16: DltFormatType = DltFormatType(2);
}
impl DltFormatType {
    pub const DLT_FORMAT_HEX32: DltFormatType = DltFormatType(3);
}
impl DltFormatType {
    pub const DLT_FORMAT_HEX64: DltFormatType = DltFormatType(4);
}
impl DltFormatType {
    pub const DLT_FORMAT_BIN8: DltFormatType = DltFormatType(5);
}
impl DltFormatType {
    pub const DLT_FORMAT_BIN16: DltFormatType = DltFormatType(6);
}
impl DltFormatType {
    pub const DLT_FORMAT_MAX: DltFormatType = DltFormatType(7);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct DltFormatType(pub ::std::os::raw::c_uint);
impl DltTraceStatusType {
    pub const DLT_TRACE_STATUS_DEFAULT: DltTraceStatusType = DltTraceStatusType(-1);
}
impl DltTraceStatusType {
    pub const DLT_TRACE_STATUS_OFF: DltTraceStatusType = DltTraceStatusType(0);
}
impl DltTraceStatusType {
    pub const DLT_TRACE_STATUS_ON: DltTraceStatusType = DltTraceStatusType(1);
}
impl DltTraceStatusType {
    pub const DLT_TRACE_STATUS_MAX: DltTraceStatusType = DltTraceStatusType(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct DltTraceStatusType(pub ::std::os::raw::c_int);
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_IPC: DltNetworkTraceType = DltNetworkTraceType(1);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_CAN: DltNetworkTraceType = DltNetworkTraceType(2);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_FLEXRAY: DltNetworkTraceType = DltNetworkTraceType(3);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_MOST: DltNetworkTraceType = DltNetworkTraceType(4);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_RESERVED0: DltNetworkTraceType = DltNetworkTraceType(5);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_RESERVED1: DltNetworkTraceType = DltNetworkTraceType(6);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_RESERVED2: DltNetworkTraceType = DltNetworkTraceType(7);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_USER_DEFINED0: DltNetworkTraceType = DltNetworkTraceType(8);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_USER_DEFINED1: DltNetworkTraceType = DltNetworkTraceType(9);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_USER_DEFINED2: DltNetworkTraceType = DltNetworkTraceType(10);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_USER_DEFINED3: DltNetworkTraceType = DltNetworkTraceType(11);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_USER_DEFINED4: DltNetworkTraceType = DltNetworkTraceType(12);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_USER_DEFINED5: DltNetworkTraceType = DltNetworkTraceType(13);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_USER_DEFINED6: DltNetworkTraceType = DltNetworkTraceType(14);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_RESEND: DltNetworkTraceType = DltNetworkTraceType(15);
}
impl DltNetworkTraceType {
    pub const DLT_NW_TRACE_MAX: DltNetworkTraceType = DltNetworkTraceType(16);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct DltNetworkTraceType(pub ::std::os::raw::c_uint);
impl DltUserLogMode {
    pub const DLT_USER_MODE_UNDEFINED: DltUserLogMode = DltUserLogMode(-1);
}
impl DltUserLogMode {
    pub const DLT_USER_MODE_OFF: DltUserLogMode = DltUserLogMode(0);
}
impl DltUserLogMode {
    pub const DLT_USER_MODE_EXTERNAL: DltUserLogMode = DltUserLogMode(1);
}
impl DltUserLogMode {
    pub const DLT_USER_MODE_INTERNAL: DltUserLogMode = DltUserLogMode(2);
}
impl DltUserLogMode {
    pub const DLT_USER_MODE_BOTH: DltUserLogMode = DltUserLogMode(3);
}
impl DltUserLogMode {
    pub const DLT_USER_MODE_MAX: DltUserLogMode = DltUserLogMode(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct DltUserLogMode(pub ::std::os::raw::c_int);
pub type float32_t = f32;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type speed_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn dlt_get_service_name(id: ::std::os::raw::c_uint) -> *const ::std::os::raw::c_char;
}
impl DltReceiverType {
    pub const DLT_RECEIVE_SOCKET: DltReceiverType = DltReceiverType(0);
}
impl DltReceiverType {
    pub const DLT_RECEIVE_FD: DltReceiverType = DltReceiverType(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct DltReceiverType(pub ::std::os::raw::c_uint);
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltStorageHeader {
    pub pattern: [::std::os::raw::c_char; 4usize],
    pub seconds: u32,
    pub microseconds: i32,
    pub ecu: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltStorageHeader() {
    const UNINIT: ::std::mem::MaybeUninit<DltStorageHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltStorageHeader>(),
        16usize,
        concat!("Size of: ", stringify!(DltStorageHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<DltStorageHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(DltStorageHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStorageHeader),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStorageHeader),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).microseconds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStorageHeader),
            "::",
            stringify!(microseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ecu) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStorageHeader),
            "::",
            stringify!(ecu)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltStandardHeader {
    pub htyp: u8,
    pub mcnt: u8,
    pub len: u16,
}
#[test]
fn bindgen_test_layout_DltStandardHeader() {
    const UNINIT: ::std::mem::MaybeUninit<DltStandardHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltStandardHeader>(),
        4usize,
        concat!("Size of: ", stringify!(DltStandardHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<DltStandardHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(DltStandardHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).htyp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeader),
            "::",
            stringify!(htyp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcnt) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeader),
            "::",
            stringify!(mcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeader),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltStandardHeaderExtra {
    pub ecu: [::std::os::raw::c_char; 4usize],
    pub seid: u32,
    pub tmsp: u32,
}
#[test]
fn bindgen_test_layout_DltStandardHeaderExtra() {
    const UNINIT: ::std::mem::MaybeUninit<DltStandardHeaderExtra> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltStandardHeaderExtra>(),
        12usize,
        concat!("Size of: ", stringify!(DltStandardHeaderExtra))
    );
    assert_eq!(
        ::std::mem::align_of::<DltStandardHeaderExtra>(),
        1usize,
        concat!("Alignment of ", stringify!(DltStandardHeaderExtra))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ecu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeaderExtra),
            "::",
            stringify!(ecu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeaderExtra),
            "::",
            stringify!(seid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmsp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltStandardHeaderExtra),
            "::",
            stringify!(tmsp)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DltExtendedHeader {
    pub msin: u8,
    pub noar: u8,
    pub apid: [::std::os::raw::c_char; 4usize],
    pub ctid: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltExtendedHeader() {
    const UNINIT: ::std::mem::MaybeUninit<DltExtendedHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltExtendedHeader>(),
        10usize,
        concat!("Size of: ", stringify!(DltExtendedHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<DltExtendedHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(DltExtendedHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltExtendedHeader),
            "::",
            stringify!(msin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noar) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DltExtendedHeader),
            "::",
            stringify!(noar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apid) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DltExtendedHeader),
            "::",
            stringify!(apid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctid) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DltExtendedHeader),
            "::",
            stringify!(ctid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sDltMessage {
    pub found_serialheader: i8,
    pub resync_offset: i32,
    pub headersize: i32,
    pub datasize: i32,
    pub headerbuffer: [u8; 42usize],
    pub databuffer: *mut u8,
    pub databuffersize: i32,
    pub storageheader: *mut DltStorageHeader,
    pub standardheader: *mut DltStandardHeader,
    pub headerextra: DltStandardHeaderExtra,
    pub extendedheader: *mut DltExtendedHeader,
}
#[test]
fn bindgen_test_layout_sDltMessage() {
    const UNINIT: ::std::mem::MaybeUninit<sDltMessage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sDltMessage>(),
        120usize,
        concat!("Size of: ", stringify!(sDltMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<sDltMessage>(),
        8usize,
        concat!("Alignment of ", stringify!(sDltMessage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).found_serialheader) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(found_serialheader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resync_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(resync_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headersize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(headersize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datasize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(datasize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerbuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(headerbuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).databuffer) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(databuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).databuffersize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(databuffersize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageheader) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(storageheader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standardheader) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(standardheader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerextra) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(headerextra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendedheader) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltMessage),
            "::",
            stringify!(extendedheader)
        )
    );
}
pub type DltMessage = sDltMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ContextIDsInfoType {
    pub context_id: [::std::os::raw::c_char; 4usize],
    pub log_level: i16,
    pub trace_status: i16,
    pub len_context_description: u16,
    pub context_description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ContextIDsInfoType() {
    const UNINIT: ::std::mem::MaybeUninit<ContextIDsInfoType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ContextIDsInfoType>(),
        24usize,
        concat!("Size of: ", stringify!(ContextIDsInfoType))
    );
    assert_eq!(
        ::std::mem::align_of::<ContextIDsInfoType>(),
        8usize,
        concat!("Alignment of ", stringify!(ContextIDsInfoType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextIDsInfoType),
            "::",
            stringify!(context_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextIDsInfoType),
            "::",
            stringify!(log_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trace_status) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextIDsInfoType),
            "::",
            stringify!(trace_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_context_description) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextIDsInfoType),
            "::",
            stringify!(len_context_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextIDsInfoType),
            "::",
            stringify!(context_description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AppIDsType {
    pub app_id: [::std::os::raw::c_char; 4usize],
    pub count_context_ids: u16,
    pub context_id_info: *mut ContextIDsInfoType,
    pub len_app_description: u16,
    pub app_description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AppIDsType() {
    const UNINIT: ::std::mem::MaybeUninit<AppIDsType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AppIDsType>(),
        32usize,
        concat!("Size of: ", stringify!(AppIDsType))
    );
    assert_eq!(
        ::std::mem::align_of::<AppIDsType>(),
        8usize,
        concat!("Alignment of ", stringify!(AppIDsType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AppIDsType),
            "::",
            stringify!(app_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_context_ids) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AppIDsType),
            "::",
            stringify!(count_context_ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_id_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AppIDsType),
            "::",
            stringify!(context_id_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_app_description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AppIDsType),
            "::",
            stringify!(len_app_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_description) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AppIDsType),
            "::",
            stringify!(app_description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LogInfoType {
    pub count_app_ids: u16,
    pub app_ids: *mut AppIDsType,
}
#[test]
fn bindgen_test_layout_LogInfoType() {
    const UNINIT: ::std::mem::MaybeUninit<LogInfoType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LogInfoType>(),
        16usize,
        concat!("Size of: ", stringify!(LogInfoType))
    );
    assert_eq!(
        ::std::mem::align_of::<LogInfoType>(),
        8usize,
        concat!("Alignment of ", stringify!(LogInfoType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_app_ids) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LogInfoType),
            "::",
            stringify!(count_app_ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_ids) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LogInfoType),
            "::",
            stringify!(app_ids)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltServiceGetLogInfoResponse {
    pub service_id: u32,
    pub status: u8,
    pub log_info_type: LogInfoType,
    pub com: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_DltServiceGetLogInfoResponse() {
    const UNINIT: ::std::mem::MaybeUninit<DltServiceGetLogInfoResponse> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltServiceGetLogInfoResponse>(),
        32usize,
        concat!("Size of: ", stringify!(DltServiceGetLogInfoResponse))
    );
    assert_eq!(
        ::std::mem::align_of::<DltServiceGetLogInfoResponse>(),
        8usize,
        concat!("Alignment of ", stringify!(DltServiceGetLogInfoResponse))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoResponse),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoResponse),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_info_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoResponse),
            "::",
            stringify!(log_info_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).com) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DltServiceGetLogInfoResponse),
            "::",
            stringify!(com)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltFilter {
    pub apid: [[::std::os::raw::c_char; 4usize]; 30usize],
    pub ctid: [[::std::os::raw::c_char; 4usize]; 30usize],
    pub counter: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DltFilter() {
    const UNINIT: ::std::mem::MaybeUninit<DltFilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltFilter>(),
        244usize,
        concat!("Size of: ", stringify!(DltFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<DltFilter>(),
        4usize,
        concat!("Alignment of ", stringify!(DltFilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltFilter),
            "::",
            stringify!(apid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctid) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DltFilter),
            "::",
            stringify!(ctid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(DltFilter),
            "::",
            stringify!(counter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sDltFile {
    pub handle: *mut FILE,
    pub index: *mut ::std::os::raw::c_long,
    pub counter: i32,
    pub counter_total: i32,
    pub position: i32,
    pub file_length: ::std::os::raw::c_long,
    pub file_position: ::std::os::raw::c_long,
    pub error_messages: i32,
    pub filter: *mut DltFilter,
    pub filter_counter: i32,
    pub msg: DltMessage,
}
#[test]
fn bindgen_test_layout_sDltFile() {
    const UNINIT: ::std::mem::MaybeUninit<sDltFile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sDltFile>(),
        192usize,
        concat!("Size of: ", stringify!(sDltFile))
    );
    assert_eq!(
        ::std::mem::align_of::<sDltFile>(),
        8usize,
        concat!("Alignment of ", stringify!(sDltFile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter_total) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(counter_total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_length) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(file_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_position) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(file_position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_messages) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(error_messages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_counter) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(filter_counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sDltFile),
            "::",
            stringify!(msg)
        )
    );
}
pub type DltFile = sDltFile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltReceiver {
    pub lastBytesRcvd: i32,
    pub bytesRcvd: i32,
    pub totalBytesRcvd: i32,
    pub buffer: *mut ::std::os::raw::c_char,
    pub buf: *mut ::std::os::raw::c_char,
    pub backup_buf: *mut ::std::os::raw::c_char,
    pub fd: ::std::os::raw::c_int,
    pub buffersize: i32,
}
#[test]
fn bindgen_test_layout_DltReceiver() {
    const UNINIT: ::std::mem::MaybeUninit<DltReceiver> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltReceiver>(),
        48usize,
        concat!("Size of: ", stringify!(DltReceiver))
    );
    assert_eq!(
        ::std::mem::align_of::<DltReceiver>(),
        8usize,
        concat!("Alignment of ", stringify!(DltReceiver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastBytesRcvd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(lastBytesRcvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesRcvd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(bytesRcvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalBytesRcvd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(totalBytesRcvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backup_buf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(backup_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffersize) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DltReceiver),
            "::",
            stringify!(buffersize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltBuffer {
    pub shm: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_int,
    pub mem: *mut ::std::os::raw::c_uchar,
    pub min_size: u32,
    pub max_size: u32,
    pub step_size: u32,
}
#[test]
fn bindgen_test_layout_DltBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<DltBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltBuffer>(),
        40usize,
        concat!("Size of: ", stringify!(DltBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<DltBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(DltBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(shm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(min_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DltBuffer),
            "::",
            stringify!(step_size)
        )
    );
}
extern "C" {
    pub fn dlt_print_hex(ptr: *mut u8, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dlt_print_hex_string(
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        ptr: *mut u8,
        size: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_print_mixed_string(
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        ptr: *mut u8,
        size: ::std::os::raw::c_int,
        html: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_print_char_string(
        text: *mut *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        ptr: *mut u8,
        size: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_print_id(text: *mut ::std::os::raw::c_char, id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dlt_set_id(id: *mut ::std::os::raw::c_char, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dlt_clean_string(text: *mut ::std::os::raw::c_char, length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dlt_filter_init(
        filter: *mut DltFilter,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_filter_free(
        filter: *mut DltFilter,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_filter_load(
        filter: *mut DltFilter,
        filename: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_filter_save(
        filter: *mut DltFilter,
        filename: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_filter_find(
        filter: *mut DltFilter,
        apid: *const ::std::os::raw::c_char,
        ctid: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_filter_add(
        filter: *mut DltFilter,
        apid: *const ::std::os::raw::c_char,
        ctid: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_filter_delete(
        filter: *mut DltFilter,
        apid: *const ::std::os::raw::c_char,
        ctid: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_init(msg: *mut DltMessage, verbose: ::std::os::raw::c_int)
        -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_free(msg: *mut DltMessage, verbose: ::std::os::raw::c_int)
        -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_header(
        msg: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_header_flags(
        msg: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_payload(
        msg: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_filter_check(
        msg: *mut DltMessage,
        filter: *mut DltFilter,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_read(
        msg: *mut DltMessage,
        buffer: *mut u8,
        length: ::std::os::raw::c_uint,
        resync: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_message_get_extraparameters(
        msg: *mut DltMessage,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_set_extraparameters(
        msg: *mut DltMessage,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_init(file: *mut DltFile, verbose: ::std::os::raw::c_int) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_set_filter(
        file: *mut DltFile,
        filter: *mut DltFilter,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_open(
        file: *mut DltFile,
        filename: *const ::std::os::raw::c_char,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read(file: *mut DltFile, verbose: ::std::os::raw::c_int) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read_raw(
        file: *mut DltFile,
        resync: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_close(file: *mut DltFile, verbose: ::std::os::raw::c_int) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read_header(
        file: *mut DltFile,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read_header_raw(
        file: *mut DltFile,
        resync: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read_header_extended(
        file: *mut DltFile,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_read_data(file: *mut DltFile, verbose: ::std::os::raw::c_int)
        -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_message(
        file: *mut DltFile,
        index: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_file_free(file: *mut DltFile, verbose: ::std::os::raw::c_int) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_set_filename(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dlt_log_set_level(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dlt_log_init(mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dlt_log(prio: ::std::os::raw::c_int, s: *mut ::std::os::raw::c_char) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_vlog(
        prio: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_vnlog(
        prio: ::std::os::raw::c_int,
        size: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_free();
}
extern "C" {
    pub fn dlt_receiver_init(
        receiver: *mut DltReceiver,
        _fd: ::std::os::raw::c_int,
        _buffersize: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_free(receiver: *mut DltReceiver) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_init_unix_socket(
        receiver: *mut DltReceiver,
        fd: ::std::os::raw::c_int,
        buffer: *mut *mut ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_free_unix_socket(receiver: *mut DltReceiver) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_receive(
        receiver: *mut DltReceiver,
        from_src: DltReceiverType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_receiver_remove(
        receiver: *mut DltReceiver,
        size: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_move_to_begin(receiver: *mut DltReceiver) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_receiver_check_and_get(
        receiver: *mut DltReceiver,
        dest: *mut ::std::os::raw::c_void,
        to_get: ::std::os::raw::c_uint,
        skip_header: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_set_storageheader(
        storageheader: *mut DltStorageHeader,
        ecu: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_check_storageheader(storageheader: *mut DltStorageHeader) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_init_static_server(
        buf: *mut DltBuffer,
        ptr: *const ::std::os::raw::c_uchar,
        size: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_init_static_client(
        buf: *mut DltBuffer,
        ptr: *const ::std::os::raw::c_uchar,
        size: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_init_dynamic(
        buf: *mut DltBuffer,
        min_size: u32,
        max_size: u32,
        step_size: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_free_static(buf: *mut DltBuffer) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_free_dynamic(buf: *mut DltBuffer) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_check_size(
        buf: *mut DltBuffer,
        needed: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_push(
        buf: *mut DltBuffer,
        data: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_uint,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_push3(
        buf: *mut DltBuffer,
        data1: *const ::std::os::raw::c_uchar,
        size1: ::std::os::raw::c_uint,
        data2: *const ::std::os::raw::c_uchar,
        size2: ::std::os::raw::c_uint,
        data3: *const ::std::os::raw::c_uchar,
        size3: ::std::os::raw::c_uint,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_buffer_pull(
        buf: *mut DltBuffer,
        data: *mut ::std::os::raw::c_uchar,
        max_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_buffer_copy(
        buf: *mut DltBuffer,
        data: *mut ::std::os::raw::c_uchar,
        max_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_buffer_remove(buf: *mut DltBuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_buffer_info(buf: *mut DltBuffer);
}
extern "C" {
    pub fn dlt_buffer_status(buf: *mut DltBuffer);
}
extern "C" {
    pub fn dlt_buffer_get_total_size(buf: *mut DltBuffer) -> u32;
}
extern "C" {
    pub fn dlt_buffer_get_used_size(buf: *mut DltBuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_buffer_get_message_count(buf: *mut DltBuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_setup_serial(fd: ::std::os::raw::c_int, speed: speed_t) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_convert_serial_speed(baudrate: ::std::os::raw::c_int) -> speed_t;
}
extern "C" {
    pub fn dlt_get_version(buf: *mut ::std::os::raw::c_char, size: usize);
}
extern "C" {
    pub fn dlt_get_major_version(buf: *mut ::std::os::raw::c_char, size: usize);
}
extern "C" {
    pub fn dlt_get_minor_version(buf: *mut ::std::os::raw::c_char, size: usize);
}
extern "C" {
    pub fn dlt_init_common() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_uptime() -> u32;
}
extern "C" {
    pub fn dlt_message_print_header(
        message: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        size: u32,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_print_hex(
        message: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        size: u32,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_print_ascii(
        message: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        size: u32,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_print_mixed_plain(
        message: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        size: u32,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_print_mixed_html(
        message: *mut DltMessage,
        text: *mut ::std::os::raw::c_char,
        size: u32,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_message_argument_print(
        msg: *mut DltMessage,
        type_info: u32,
        ptr: *mut *mut u8,
        datalength: *mut i32,
        text: *mut ::std::os::raw::c_char,
        textlength: ::std::os::raw::c_int,
        byteLength: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_check_envvar();
}
extern "C" {
    pub fn dlt_set_loginfo_parse_service_id(
        resp_text: *mut ::std::os::raw::c_char,
        service_id: *mut u32,
        service_opt: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_getloginfo_conv_ascii_to_uint16_t(
        rp: *mut ::std::os::raw::c_char,
        rp_count: *mut ::std::os::raw::c_int,
    ) -> i16;
}
extern "C" {
    pub fn dlt_getloginfo_conv_ascii_to_int16_t(
        rp: *mut ::std::os::raw::c_char,
        rp_count: *mut ::std::os::raw::c_int,
    ) -> i16;
}
extern "C" {
    pub fn dlt_getloginfo_conv_ascii_to_id(
        rp: *mut ::std::os::raw::c_char,
        rp_count: *mut ::std::os::raw::c_int,
        wp: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dlt_hex_ascii_to_binary(
        ptr: *const ::std::os::raw::c_char,
        binary: *mut u8,
        size: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dlt_mkdir_recursive(dir: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltShm {
    pub shmfd: ::std::os::raw::c_int,
    pub sem: *mut sem_t,
    pub buffer: DltBuffer,
}
#[test]
fn bindgen_test_layout_DltShm() {
    const UNINIT: ::std::mem::MaybeUninit<DltShm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltShm>(),
        56usize,
        concat!("Size of: ", stringify!(DltShm))
    );
    assert_eq!(
        ::std::mem::align_of::<DltShm>(),
        8usize,
        concat!("Alignment of ", stringify!(DltShm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shmfd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltShm),
            "::",
            stringify!(shmfd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltShm),
            "::",
            stringify!(sem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DltShm),
            "::",
            stringify!(buffer)
        )
    );
}
extern "C" {
    pub fn dlt_shm_init_client(
        buf: *mut DltShm,
        name: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_shm_init_server(
        buf: *mut DltShm,
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_shm_push(
        buf: *mut DltShm,
        data1: *const ::std::os::raw::c_uchar,
        size1: ::std::os::raw::c_uint,
        data2: *const ::std::os::raw::c_uchar,
        size2: ::std::os::raw::c_uint,
        data3: *const ::std::os::raw::c_uchar,
        size3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_shm_pull(
        buf: *mut DltShm,
        data: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_shm_copy(
        buf: *mut DltShm,
        data: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_shm_remove(buf: *mut DltShm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_shm_info(buf: *mut DltShm);
}
extern "C" {
    pub fn dlt_shm_status(buf: *mut DltShm);
}
extern "C" {
    pub fn dlt_shm_free_client(buf: *mut DltShm) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_shm_get_total_size(buf: *mut DltShm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_shm_get_used_size(buf: *mut DltShm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_shm_get_message_count(buf: *mut DltShm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_shm_reset(buf: *mut DltShm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_shm_recover(buf: *mut DltShm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_shm_free_server(
        buf: *mut DltShm,
        name: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltContext {
    pub contextID: [::std::os::raw::c_char; 4usize],
    pub log_level_pos: i32,
    pub log_level_ptr: *mut i8,
    pub trace_status_ptr: *mut i8,
    pub mcnt: u8,
}
#[test]
fn bindgen_test_layout_DltContext() {
    const UNINIT: ::std::mem::MaybeUninit<DltContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltContext>(),
        32usize,
        concat!("Size of: ", stringify!(DltContext))
    );
    assert_eq!(
        ::std::mem::align_of::<DltContext>(),
        8usize,
        concat!("Alignment of ", stringify!(DltContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contextID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContext),
            "::",
            stringify!(contextID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_level_pos) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContext),
            "::",
            stringify!(log_level_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_level_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContext),
            "::",
            stringify!(log_level_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trace_status_ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContext),
            "::",
            stringify!(trace_status_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcnt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContext),
            "::",
            stringify!(mcnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltContextData {
    pub handle: *mut DltContext,
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub size: i32,
    pub log_level: i32,
    pub trace_status: i32,
    pub args_num: i32,
    pub context_description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_DltContextData() {
    const UNINIT: ::std::mem::MaybeUninit<DltContextData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltContextData>(),
        40usize,
        concat!("Size of: ", stringify!(DltContextData))
    );
    assert_eq!(
        ::std::mem::align_of::<DltContextData>(),
        8usize,
        concat!("Alignment of ", stringify!(DltContextData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContextData),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContextData),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContextData),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_level) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContextData),
            "::",
            stringify!(log_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trace_status) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContextData),
            "::",
            stringify!(trace_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args_num) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContextData),
            "::",
            stringify!(args_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_description) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DltContextData),
            "::",
            stringify!(context_description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dlt_env_ll_item {
    pub appId: [::std::os::raw::c_char; 4usize],
    pub ctxId: [::std::os::raw::c_char; 4usize],
    pub ll: i8,
}
#[test]
fn bindgen_test_layout_dlt_env_ll_item() {
    const UNINIT: ::std::mem::MaybeUninit<dlt_env_ll_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dlt_env_ll_item>(),
        9usize,
        concat!("Size of: ", stringify!(dlt_env_ll_item))
    );
    assert_eq!(
        ::std::mem::align_of::<dlt_env_ll_item>(),
        1usize,
        concat!("Alignment of ", stringify!(dlt_env_ll_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlt_env_ll_item),
            "::",
            stringify!(appId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctxId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dlt_env_ll_item),
            "::",
            stringify!(ctxId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dlt_env_ll_item),
            "::",
            stringify!(ll)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dlt_env_ll_set {
    pub item: *mut dlt_env_ll_item,
    pub array_size: usize,
    pub num_elem: usize,
}
#[test]
fn bindgen_test_layout_dlt_env_ll_set() {
    const UNINIT: ::std::mem::MaybeUninit<dlt_env_ll_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dlt_env_ll_set>(),
        24usize,
        concat!("Size of: ", stringify!(dlt_env_ll_set))
    );
    assert_eq!(
        ::std::mem::align_of::<dlt_env_ll_set>(),
        8usize,
        concat!("Alignment of ", stringify!(dlt_env_ll_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).item) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlt_env_ll_set),
            "::",
            stringify!(item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dlt_env_ll_set),
            "::",
            stringify!(array_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_elem) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dlt_env_ll_set),
            "::",
            stringify!(num_elem)
        )
    );
}
extern "C" {
    pub fn dlt_user_log_write_start(
        handle: *mut DltContext,
        log: *mut DltContextData,
        loglevel: DltLogLevelType,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_start_id(
        handle: *mut DltContext,
        log: *mut DltContextData,
        loglevel: DltLogLevelType,
        messageid: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_finish(log: *mut DltContextData) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_bool(log: *mut DltContextData, data: u8) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_float32(log: *mut DltContextData, data: float32_t) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_float64(log: *mut DltContextData, data: f64) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_uint(
        log: *mut DltContextData,
        data: ::std::os::raw::c_uint,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_uint8(log: *mut DltContextData, data: u8) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_uint16(log: *mut DltContextData, data: u16) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_uint32(log: *mut DltContextData, data: u32) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_uint64(log: *mut DltContextData, data: u64) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_uint8_formatted(
        log: *mut DltContextData,
        data: u8,
        type_: DltFormatType,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_uint16_formatted(
        log: *mut DltContextData,
        data: u16,
        type_: DltFormatType,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_uint32_formatted(
        log: *mut DltContextData,
        data: u32,
        type_: DltFormatType,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_uint64_formatted(
        log: *mut DltContextData,
        data: u64,
        type_: DltFormatType,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_ptr(
        log: *mut DltContextData,
        data: *mut ::std::os::raw::c_void,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_int(
        log: *mut DltContextData,
        data: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_int8(log: *mut DltContextData, data: i8) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_int16(log: *mut DltContextData, data: i16) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_int32(log: *mut DltContextData, data: i32) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_int64(log: *mut DltContextData, data: i64) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_string(
        log: *mut DltContextData,
        text: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_constant_string(
        log: *mut DltContextData,
        text: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_utf8_string(
        log: *mut DltContextData,
        text: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_raw(
        log: *mut DltContextData,
        data: *mut ::std::os::raw::c_void,
        length: u16,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_log_write_raw_formatted(
        log: *mut DltContextData,
        data: *mut ::std::os::raw::c_void,
        length: u16,
        type_: DltFormatType,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_trace_network(
        handle: *mut DltContext,
        nw_trace_type: DltNetworkTraceType,
        header_len: u16,
        header: *mut ::std::os::raw::c_void,
        payload_len: u16,
        payload: *mut ::std::os::raw::c_void,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_trace_network_truncated(
        handle: *mut DltContext,
        nw_trace_type: DltNetworkTraceType,
        header_len: u16,
        header: *mut ::std::os::raw::c_void,
        payload_len: u16,
        payload: *mut ::std::os::raw::c_void,
        allow_truncate: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_trace_network_segmented(
        handle: *mut DltContext,
        nw_trace_type: DltNetworkTraceType,
        header_len: u16,
        header: *mut ::std::os::raw::c_void,
        payload_len: u16,
        payload: *mut ::std::os::raw::c_void,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_init() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_init_file(name: *const ::std::os::raw::c_char) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_free() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_check_library_version(
        user_major_version: *const ::std::os::raw::c_char,
        user_minor_version: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_register_app(
        apid: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_unregister_app() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_unregister_app_flush_buffered_logs() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_register_context(
        handle: *mut DltContext,
        contextid: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_register_context_ll_ts(
        handle: *mut DltContext,
        contextid: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        loglevel: ::std::os::raw::c_int,
        tracestatus: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_register_context_llccb(
        handle: *mut DltContext,
        contextid: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        dlt_log_level_changed_callback: ::std::option::Option<
            unsafe extern "C" fn(
                context_id: *mut ::std::os::raw::c_char,
                log_level: u8,
                trace_status: u8,
            ),
        >,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_unregister_context(handle: *mut DltContext) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_set_resend_timeout_atexit(timeout_in_milliseconds: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_set_log_mode(mode: DltUserLogMode) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_get_log_state() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_register_injection_callback(
        handle: *mut DltContext,
        service_id: u32,
        dlt_injection_callback: ::std::option::Option<
            unsafe extern "C" fn(
                service_id: u32,
                data: *mut ::std::os::raw::c_void,
                length: u32,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_register_injection_callback_with_id(
        handle: *mut DltContext,
        service_id: u32,
        dlt_injection_callback: ::std::option::Option<
            unsafe extern "C" fn(
                service_id: u32,
                data: *mut ::std::os::raw::c_void,
                length: u32,
                priv_data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        priv_: *mut ::std::os::raw::c_void,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_register_log_level_changed_callback(
        handle: *mut DltContext,
        dlt_log_level_changed_callback: ::std::option::Option<
            unsafe extern "C" fn(
                context_id: *mut ::std::os::raw::c_char,
                log_level: u8,
                trace_status: u8,
            ),
        >,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_verbose_mode() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_check_library_version(
        user_major_version: *const ::std::os::raw::c_char,
        user_minor_version: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_nonverbose_mode() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_use_extended_header_for_non_verbose(
        use_extende_header_for_non_verbose: i8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_with_session_id(with_session_id: i8) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_with_timestamp(with_timestamp: i8) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_with_ecu_id(with_ecu_id: i8) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_set_application_ll_ts_limit(
        loglevel: DltLogLevelType,
        tracestatus: DltTraceStatusType,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_env_adjust_ll_from_env(
        ll_set: *const dlt_env_ll_set,
        apid: *const ::std::os::raw::c_char,
        ctid: *const ::std::os::raw::c_char,
        ll: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_env_extract_ll_set(
        env: *mut *mut ::std::os::raw::c_char,
        ll_set: *mut dlt_env_ll_set,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_env_free_ll_set(ll_set: *mut dlt_env_ll_set);
}
extern "C" {
    pub fn dlt_enable_local_print() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_disable_local_print() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_string(
        handle: *mut DltContext,
        loglevel: DltLogLevelType,
        text: *const ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_string_int(
        handle: *mut DltContext,
        loglevel: DltLogLevelType,
        text: *const ::std::os::raw::c_char,
        data: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_string_uint(
        handle: *mut DltContext,
        loglevel: DltLogLevelType,
        text: *const ::std::os::raw::c_char,
        data: ::std::os::raw::c_uint,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_int(
        handle: *mut DltContext,
        loglevel: DltLogLevelType,
        data: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_uint(
        handle: *mut DltContext,
        loglevel: DltLogLevelType,
        data: ::std::os::raw::c_uint,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_raw(
        handle: *mut DltContext,
        loglevel: DltLogLevelType,
        data: *mut ::std::os::raw::c_void,
        length: u16,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_log_marker() -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_check_buffer(
        total_size: *mut ::std::os::raw::c_int,
        used_size: *mut ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_user_atexit_blow_out_user_buffer() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_user_log_resend_buffer() -> DltReturnValue;
}
impl DltClientMode {
    pub const DLT_CLIENT_MODE_UNDEFINED: DltClientMode = DltClientMode(-1);
}
impl DltClientMode {
    pub const DLT_CLIENT_MODE_TCP: DltClientMode = DltClientMode(0);
}
impl DltClientMode {
    pub const DLT_CLIENT_MODE_SERIAL: DltClientMode = DltClientMode(1);
}
impl DltClientMode {
    pub const DLT_CLIENT_MODE_UNIX: DltClientMode = DltClientMode(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct DltClientMode(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DltClient {
    pub receiver: DltReceiver,
    pub sock: ::std::os::raw::c_int,
    pub servIP: *mut ::std::os::raw::c_char,
    pub port: ::std::os::raw::c_int,
    pub serialDevice: *mut ::std::os::raw::c_char,
    pub socketPath: *mut ::std::os::raw::c_char,
    pub ecuid: [::std::os::raw::c_char; 4usize],
    pub baudrate: speed_t,
    pub mode: DltClientMode,
}
#[test]
fn bindgen_test_layout_DltClient() {
    const UNINIT: ::std::mem::MaybeUninit<DltClient> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DltClient>(),
        104usize,
        concat!("Size of: ", stringify!(DltClient))
    );
    assert_eq!(
        ::std::mem::align_of::<DltClient>(),
        8usize,
        concat!("Alignment of ", stringify!(DltClient))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).receiver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(receiver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sock) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servIP) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(servIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialDevice) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(serialDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socketPath) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(socketPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ecuid) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(ecuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baudrate) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(baudrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DltClient),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn dlt_client_register_message_callback(
        registerd_callback: ::std::option::Option<
            unsafe extern "C" fn(
                message: *mut DltMessage,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn dlt_client_init_port(
        client: *mut DltClient,
        port: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_client_init(
        client: *mut DltClient,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_connect(
        client: *mut DltClient,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_cleanup(
        client: *mut DltClient,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_main_loop(
        client: *mut DltClient,
        data: *mut ::std::os::raw::c_void,
        verbose: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_ctrl_msg(
        client: *mut DltClient,
        apid: *mut ::std::os::raw::c_char,
        ctid: *mut ::std::os::raw::c_char,
        payload: *mut u8,
        size: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_inject_msg(
        client: *mut DltClient,
        apid: *mut ::std::os::raw::c_char,
        ctid: *mut ::std::os::raw::c_char,
        serviceID: u32,
        buffer: *mut u8,
        size: u32,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_log_level(
        client: *mut DltClient,
        apid: *mut ::std::os::raw::c_char,
        ctid: *mut ::std::os::raw::c_char,
        logLevel: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_get_log_info(client: *mut DltClient) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_client_get_default_log_level(client: *mut DltClient) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_get_software_version(client: *mut DltClient) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_getloginfo_init();
}
extern "C" {
    pub fn dlt_getloginfo_free();
}
extern "C" {
    pub fn dlt_client_send_trace_status(
        client: *mut DltClient,
        apid: *mut ::std::os::raw::c_char,
        ctid: *mut ::std::os::raw::c_char,
        traceStatus: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_default_log_level(
        client: *mut DltClient,
        defaultLogLevel: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_all_log_level(client: *mut DltClient, LogLevel: u8) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_default_trace_status(
        client: *mut DltClient,
        defaultTraceStatus: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_all_trace_status(
        client: *mut DltClient,
        traceStatus: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_timing_pakets(
        client: *mut DltClient,
        timingPakets: u8,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_store_config(client: *mut DltClient) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_send_reset_to_factory_default(client: *mut DltClient) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_setbaudrate(
        client: *mut DltClient,
        baudrate: ::std::os::raw::c_int,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_set_server_ip(
        client: *mut DltClient,
        ipaddr: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_client_set_serial_device(
        client: *mut DltClient,
        serial_device: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_client_set_socket_path(
        client: *mut DltClient,
        socket_path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlt_client_parse_get_log_info_resp_text(
        resp: *mut DltServiceGetLogInfoResponse,
        resp_text: *mut ::std::os::raw::c_char,
    ) -> DltReturnValue;
}
extern "C" {
    pub fn dlt_client_cleanup_get_log_info(
        resp: *mut DltServiceGetLogInfoResponse,
    ) -> ::std::os::raw::c_int;
}
